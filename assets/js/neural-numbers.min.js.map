{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/BarChart.js","js/Paint.js","js/main-lib.js","js/neural-numbers-component.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","BarChart","el","_classCallCheck","this","cleanup","bars","cbarcontainer","document","createElement","className","classList","add","cbartext","innerHTML","concat","appendChild","firstChild","removeChild","probabilities","highlighted","arguments","undefined","dataset","probability","style","toggle","_BarChart","SCALE_FACTOR","LINEWIDTH","Paint","model","outputThreshold","nwvis","clearTimeoutTime","drawingChanged","pos","x","y","createUI","empty","isdown","pointerId","_this","eventname","eventfunctions","pointerdown","removeClearTimeout","setPosition","pointermove","draw","pointerup","setClearTimeout","pointerleave","pointercancel","drawcanvas","addEventListener","passive","removeEventListener","_this2","querySelector","normalizecanvas","outputbars","outputdigit","inputbox","addEventListeners","width","height","updateDimensions","Math","floor","clientWidth","window","onresize","drawcontext","getContext","willReadFrequently","normalizecontext","barchart","clear","rect","getBoundingClientRect","clientX","left","clientY","top","clearTimeout","_this3","setTimeout","ox","oy","nx","ny","abs","remove","beginPath","lineWidth","lineCap","strokeStyle","moveTo","lineTo","stroke","fillStyle","fillRect","normalize","predict","SKIPFACTOR","boxsize","centerx","centery","bottom","right","data","getImageData","totalweight","min","max","drawImage","_tf$tidy2","predicted","_this4","_slicedToArray","tf","tidy","imageTensor","browser","fromPixels","toFloat","mul","scalar","clipByValue","reshape","show","filter","d","k","result","dataSync","argMax","update","parentElement","removeEventListeners","_neuralNumbersComponent","attrFlag","attribute","defaultValue","$","each","element","props","modelPath","attr","inputPlaceholder","showBars","showNormalizer","showTraining","showOutput","init","IMAGINARY","NeuralNumbers","_Paint","models","_callee2","path","regeneratorRuntime","wrap","_context2","prev","next","loadLayersModel","sent","abrupt","stop","NeuralNumbersComponent","$element","paint","_this$props","safeInputPlaceholder","verticalBars","addClass","toggleClass","$inputStage","appendTo","$drawCanvas","append","html","text","$normalizeStage","$normalizeCanvas","$probabilityStage","$bars","$outputStage","$output","loadModel","PAINT_CLEAR_TIMEOUT"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,gB,4OCAqBK,E,WACnB,SAAAA,EAAYC,I,4FAAIC,CAAAC,KAAAH,GACdG,KAAKF,GAAKA,EAEVE,KAAKC,UAELD,KAAKE,KAAO,GACZ,IAAK,IAAInB,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC9B,IAAMoB,EAAgBC,SAASC,cAAc,OAC7CF,EAAcG,UAAY,eAC1BN,KAAKE,KAAKnB,GAAKqB,SAASC,cAAc,OACtCL,KAAKE,KAAKnB,GAAGwB,UAAUC,IAAI,OAC3B,IAAMC,EAAWL,SAASC,cAAc,OACxCI,EAASH,UAAY,SACrBG,EAASC,UAAT,GAAAC,OAAwB5B,GACxBoB,EAAcS,YAAYZ,KAAKE,KAAKnB,IACpCoB,EAAcS,YAAYH,GAC1BT,KAAKF,GAAGc,YAAYT,I,yDAKtB,KAAOH,KAAKF,GAAGe,YACbb,KAAKF,GAAGgB,YAAYd,KAAKF,GAAGe,c,6BAIzBE,E,GACL,IADsC,IAAlBC,EAAkB,EAAAC,UAAAvB,aAAAwB,I,KAAH,EAC1BnC,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAC3BiB,KAAKE,KAAKnB,GAAGoC,QAAQC,YAAcL,EAAchC,GACjDiB,KAAKE,KAAKnB,GAAGsC,MAAb,kBAAAV,OAAuCI,EAAchC,IACrDiB,KAAKE,KAAKnB,GAAGwB,UAAUe,OAAO,cAAevC,IAAMiC,Q,mJC7BzD,I,EAAAO,G,EAAArC,EAAA,mB,woCAEA,IAAIsC,EAAe,EACfC,EAAY,EAAID,EAECE,E,WACnB,SAAAA,EAAY5B,EAAI6B,EAAOC,GAAwD,IAAvCC,EAAuC,EAAAZ,UAAAvB,aAAAwB,IAAAD,UAAA,IAAAA,UAAA,GAAxBa,EAAwB,EAAAb,UAAAvB,aAAAwB,IAAAD,UAAA,GAAAA,UAAA,GAAL,K,4FAAKlB,CAAAC,KAAA0B,GAC7E1B,KAAK8B,iBAAmBA,EACxB9B,KAAK+B,gBAAiB,EACtB/B,KAAK2B,MAAQA,EACb3B,KAAK6B,MAAQA,EAEb7B,KAAK4B,gBAAkBA,EAGvB5B,KAAKgC,IAAM,CACTC,EAAG,EACHC,EAAG,GAGLlC,KAAKmC,SAASrC,GACdE,KAAKoC,OAAQ,EACbpC,KAAKqC,QAAS,EACdrC,KAAKsC,WAAa,E,mEAGA,IAAAC,EAAAvC,KAiClB,IAAK,IAAMwC,KAhCXxC,KAAKyC,eAAiB,CACpBC,YAAc,SAAC/D,GACR4D,EAAKF,SACRE,EAAKI,qBACLJ,EAAKK,YAAYjE,GACjB4D,EAAKF,QAAS,EACdE,EAAKD,UAAY3D,EAAE2D,YAGvBO,YAAc,SAAClE,GACT4D,EAAKF,QAAWE,EAAKD,YAAc3D,EAAE2D,WAAYC,EAAKO,KAAKnE,IAEjEoE,UAAY,SAACpE,GACN4D,EAAKD,YAAc3D,EAAE2D,YACxBC,EAAKS,kBACLT,EAAKF,QAAS,IAGlBY,aAAe,SAACtE,GACT4D,EAAKD,YAAc3D,EAAE2D,YACxBC,EAAKS,kBACLT,EAAKF,QAAS,IAGlBa,cAAgB,SAACvE,GACV4D,EAAKD,YAAc3D,EAAE2D,YACxBC,EAAKS,kBACLT,EAAKF,QAAS,KAKIrC,KAAKyC,eAC3BzC,KAAKmD,WAAWC,iBAAiBZ,EAAWxC,KAAKyC,eAAeD,GAAY,CAC1Ea,SAAS,M,6CAMb,IAAK,IAAMb,KAAaxC,KAAKyC,eAC3BzC,KAAKmD,WAAWG,oBAAoBd,EAAWxC,KAAKyC,eAAeD,M,+BAI9D1C,GAAI,IAAAyD,EAAAvD,KACXA,KAAKmD,WAAarD,EAAG0D,cAAc,eACnCxD,KAAKyD,gBAAkB3D,EAAG0D,cAAc,qBAAuBpD,SAASC,cAAc,UACtFL,KAAK0D,WAAa5D,EAAG0D,cAAc,SACnCxD,KAAK2D,YAAc7D,EAAG0D,cAAc,UACpCxD,KAAK4D,SAAW9D,EAAG0D,cAAc,cAEjCxD,KAAK6D,oBAPM,IASHJ,EAAgCzD,KAAhCyD,gBAAiBN,EAAenD,KAAfmD,WAEzBM,EAAgBK,MAAQ,GACxBL,EAAgBM,OAAS,GAEA,SAAnBC,IACJxC,EAAeyC,KAAKC,MAAMX,EAAKJ,WAAWgB,YAAc,IAAM,EAC9D1C,EAAY,EAAID,EAChB2B,EAAWW,MAAQP,EAAKJ,WAAWgB,YACnChB,EAAWY,OAASR,EAAKJ,WAAWgB,YAEtCH,IACAI,OAAOC,SAAW,WAChBL,KAGFhE,KAAKsE,YAActE,KAAKmD,WAAWoB,WAAW,KAAM,CAAEC,oBAAoB,IAC1ExE,KAAKyE,iBAAmBzE,KAAKyD,gBAAgBc,WAAW,KAAM,CAAEC,oBAAoB,IAsBhFxE,KAAK0D,aACP1D,KAAK0E,SAAW,IAAInD,EAAA,QAASvB,KAAK0D,aAGpC1D,KAAK2E,U,kCAIKhG,GACV,IAAMiG,EAAO5E,KAAKmD,WAAW0B,wBAG7B,OAFA7E,KAAKgC,IAAIC,EAAKtD,EAAEmG,QAAUF,EAAKG,KAC/B/E,KAAKgC,IAAIE,EAAKvD,EAAEqG,QAAUJ,EAAKK,KACxB,I,2CAOP,OAHIjF,KAAKkF,cACPA,aAAalF,KAAKkF,eAEb,I,wCAGS,IAAAC,EAAAnF,KAMhB,OALAA,KAAK2C,qBAEL3C,KAAKkF,aAAeE,WAAW,WAC7BD,EAAKR,SACoB,IAAxB3E,KAAK8B,mBACD,I,2BAGJnD,GACHqB,KAAK2C,qBACL,IAAM0C,EAAKrF,KAAKgC,IAAIC,EACdqD,EAAKtF,KAAKgC,IAAIE,EACpBlC,KAAK4C,YAAYjE,GACjB,IAAM4G,EAAKvF,KAAKgC,IAAIC,EACduD,EAAKxF,KAAKgC,IAAIE,EACpB,GAAI+B,KAAKwB,IAAIF,EAAKF,GAAMpB,KAAKwB,IAAID,EAAKF,GAAM,EAG1C,OAFAtF,KAAKgC,IAAIC,EAAIoD,OACbrF,KAAKgC,IAAIE,EAAIoD,GAGftF,KAAK4D,SAASrD,UAAUmF,OAAO,cAC/B1F,KAAKoC,OAAQ,EACbpC,KAAKsE,YAAYqB,YACjB3F,KAAKsE,YAAYsB,UAAYnE,EAC7BzB,KAAKsE,YAAYuB,QAAU,QAC3B7F,KAAKsE,YAAYwB,YAAc,QAE/B9F,KAAKsE,YAAYyB,OAAOV,EAAIC,GAC5BtF,KAAK4C,YAAYjE,GACjBqB,KAAKsE,YAAY0B,OAAOT,EAAIC,GAE5BxF,KAAKsE,YAAY2B,SAEjBjG,KAAKyE,iBAAiByB,UAAY,QAClClG,KAAKyE,iBAAiB0B,SAAS,EAAG,EAAGnG,KAAKyD,gBAAgBK,MAAO9D,KAAKyD,gBAAgBM,QAEtF/D,KAAK+B,gBAAiB,EACtB/B,KAAKoG,UAAU3E,GACfzB,KAAKqG,Y,gCAKGC,GAYR,IAXA,IA6BQC,EA7BJC,EAAU,EACVC,EAAU,EACVxB,EAAM,IACNyB,GAAU,IACV3B,EAAO,IACP4B,GAAS,IAILC,EAHQ5G,KAAKsE,YAAYuC,aAC/B,EAAG,EAAG7G,KAAKmD,WAAWW,MAAO9D,KAAKmD,WAAWY,QAEvC6C,KACJE,EAAc,EACT/H,EAAI,EAAGA,EAAI6H,EAAKlH,OAAQX,GAAK,EAAIuH,EAAY,CACpD,IAAMrE,EAAKlD,EAAI,EAAKiB,KAAKmD,WAAWW,MAC9B5B,EAAMnD,EAAI,EAAMiB,KAAKmD,WAAWW,MAAU,EAChDgD,GAAeF,EAAK7H,GACpByH,GAAYI,EAAK7H,GAAMkD,EACvBwE,GAAYG,EAAK7H,GAAMmD,EAET,EAAV0E,EAAK7H,KACPkG,EAAMhB,KAAK8C,IAAI9B,EAAK/C,GACpBwE,EAASzC,KAAK+C,IAAIN,EAAQxE,GAC1B6C,EAAOd,KAAK8C,IAAIhC,EAAM9C,GACtB0E,EAAQ1C,KAAK+C,IAAIL,EAAO1E,IA8B5B,OA3BkB,EAAd6E,GACFN,GAAWM,EACXL,GAAWK,EAELP,EAAUtC,KAAK+C,IAAIL,EAAQ5B,EAAM2B,EAASzB,GAWhDjF,KAAKyE,iBAAiBwC,UACpBjH,KAAKmD,WACL4B,EAAME,EACNsB,EAASA,EACT,GAAM,GAAKA,GAAYxB,EAAOyB,GAC9B,GAAM,GAAKD,GAAYtB,EAAMwB,GAC7B,GAAI,KAGNzG,KAAKyE,iBAAiB0B,SAAS,EAAG,EAAGnG,KAAKyD,gBAAgBK,MAAO9D,KAAKyD,gBAAgBM,SAGjF,I,gCAGC,IACuDmD,EACtDnG,EAAeoG,EAFhBC,EAAApH,KAgCR,OA/BIA,KAAK2B,OAAS3B,KAAKyD,iBAAmBzD,KAAK+B,iBACtChB,GADsDmG,EAAAG,EAC1BC,GAAGC,KAAK,WACzC,IAAMC,EAAcF,GAAGG,QACpBC,WAAWN,EAAK3D,gBAAiB,GACjCkE,UACAC,IAAIN,GAAGO,OAAO,EAAI,MAClBC,YAAY,EAAG,GACfC,QAAQ,CAAC,EAAG,GAAI,GAAI,IACnBX,EAAKvF,OACPuF,EAAKvF,MAAMmG,KAAKR,EACdJ,EAAK3C,iBAAiBoC,aACpB,EAAG,EACHO,EAAK3D,gBAAgBK,MAAOsD,EAAK3D,gBAAgBM,QACjD6C,KAAKqB,OAAO,SAACC,EAAGC,GAAJ,OAAWA,EAAI,GAAM,KAEvC,IAAMC,EAAShB,EAAKzF,MAAM0E,QAAQmB,GAClC,MAAO,CACLY,EAAOC,WACPD,EAAOE,OAAO,EAAE,IAAID,cAlBqC,IAAA,GACvClB,EADuCD,EAAA,GAsBzDlH,KAAK0E,UACP1E,KAAK0E,SAAS6D,OAAOxH,EAAeoG,GAGlCnH,KAAK2D,cACP3D,KAAK2D,YAAYjD,WAAcV,KAAKoC,OAASrB,EAAcoG,GAAanH,KAAK4B,gBAAmBuF,EAAY,IAC5GnH,KAAK2D,YAAY6E,cAAcjI,UAAUe,OAAO,SAAUP,EAAcoG,GAAanH,KAAK4B,oBAGvF,I,gCAGCD,GACR3B,KAAK2B,MAAQA,EACb3B,KAAKqG,Y,8BAILrG,KAAKsE,YAAY6B,SAAS,EAAG,EAAGnG,KAAKmD,WAAWW,MAAO9D,KAAKmD,WAAWY,QACvE/D,KAAKoC,OAAQ,EACbpC,KAAKoG,UAAU,KACfpG,KAAKqG,UACLrG,KAAK4D,SAASrD,UAAUC,IAAI,gB,gCAI5BR,KAAK2E,QACL3E,KAAKyI,uBAKDzI,KAAK0E,UACP1E,KAAK0E,SAASzE,e,kGC5SpB,I,EAAAyI,G,EAAAxJ,EAAA,gC,2BAEA,SAASyJ,EAASC,EAAWC,GAC3B,YAAkB3H,IAAd0H,EACKC,EAEY,UAAdD,EAGTE,EAAE,mCACCC,KAAK,SAAChK,EAAGiK,GACR,IAAMC,EAAQ,CACZC,UAAWJ,EAAEE,GAASG,KAAK,eAAiB,KAC5CC,iBAAkBN,EAAEE,GAASG,KAAK,2BAA6B,GAC/DE,SAAUV,EAASG,EAAEE,GAASG,KAAK,mBAAmB,GACtDG,eAAgBX,EAASG,EAAEE,GAASG,KAAK,yBAAyB,GAClEI,aAAcZ,EAASG,EAAEE,GAASG,KAAK,uBAAuB,GAC9DK,WAAYb,EAASG,EAAEE,GAASG,KAAK,qBAAqB,IAE1C,IAAIT,EAAA,QAAuBM,EAASC,GAC5CQ,cAGWvI,IAArBkD,OAAOsF,YACTtF,OAAOsF,UAAY,SAGkBxI,IAAnCkD,OAAOsF,UAAUC,gBACnBvF,OAAOsF,UAAUC,cAAgBjB,EAAA,U,oIC1BnC,I,EAAAkB,G,EAAA1K,EAAA,a,2fAEA,IAAM2K,EAAS,G,gDAEf,SAAAC,EAAyBC,GAAzB,OAAAC,mBAAAC,KAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,IACML,GAAUA,KAAQF,EADxB,CAAAK,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAE,KAAA,EAEyB9C,GAAG+C,gBAAgBN,GAF5C,KAAA,EAEIF,EAAOE,GAFXG,EAAAI,KAAA,KAAA,EAAA,OAAAJ,EAAAK,OAAA,SAISV,EAAOE,IAJhB,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAM,SAAAV,O,0BAOqBW,E,WACnB,SAAAA,EAAYzB,EAASC,I,4FAAOlJ,CAAAC,KAAAyK,GAC1BzK,KAAK0K,SAAW5B,EAAEE,GAClBhJ,KAAKiJ,MAAQA,EACbjJ,KAAK2B,MAAQ,KACb3B,KAAK2K,MAAQ,KAJa,IAAAC,EActB5K,KAAKiJ,MAPPG,EAPwBwB,EAOxBxB,iBACAyB,EARwBD,EAQxBC,qBACAxB,EATwBuB,EASxBvB,SACAC,EAVwBsB,EAUxBtB,eACAC,EAXwBqB,EAWxBrB,aACAC,EAZwBoB,EAYxBpB,WACAsB,EAbwBF,EAaxBE,aAGF9K,KAAK0K,SAASK,SAAS,4BACvB/K,KAAK0K,SAASM,YAAY,YAAa3B,GACvCrJ,KAAK0K,SAASM,YAAY,kBAAmB1B,GAC7CtJ,KAAK0K,SAASM,YAAY,gBAAiBzB,GAC3CvJ,KAAK0K,SAASM,YAAY,cAAexB,GAEzCxJ,KAAKiL,YAAcnC,EAAE,SAClBiC,SAAS,CAAC,QAAS,cAAe,QAAS,QAC3CG,SAASlL,KAAK0K,UAEjB1K,KAAKmL,YAAcrC,EAAE,YAClBiC,SAAS,CAAC,aAAc,iBACxBG,SACCpC,EAAE,SACCiC,SAAS,wBACTG,SAASlL,KAAKiL,cAGjB7B,EACFN,EAAE,SACCiC,SAAS,qBACTK,OACCtC,EAAE,UAAUuC,KAAKjC,IAElB8B,SAASlL,KAAKiL,aACRJ,GACT/B,EAAE,SACCiC,SAAS,qBACTK,OACCtC,EAAE,UAAUwC,KAAKT,IAElBK,SAASlL,KAAKiL,aAGnBjL,KAAKuL,gBAAkBzC,EAAE,SACtBiC,SAAS,CAAC,QAAS,oBACnBG,SAASlL,KAAK0K,UAEjB1K,KAAKwL,iBAAmB1C,EAAE,YACvBiC,SAAS,mBACTG,SAASpC,EAAE,SACTiC,SAAS,4BACTG,SAASlL,KAAKuL,kBAEnBvL,KAAKyL,kBAAoB3C,EAAE,SACxBiC,SAAS,CAAC,QAAS,eACnBG,SAASlL,KAAK0K,UAEjB1K,KAAK0L,MAAQ5C,EAAE,SACZiC,SAAS,QACTC,YAAY,gBAAiBF,IAAgB,GAC7CI,SAASlL,KAAKyL,mBAEjBzL,KAAK2L,aAAe7C,EAAE,SACnBiC,SAAS,CAAC,QAAS,iBACnBG,SAASlL,KAAK0K,UAEjB1K,KAAK4L,QAAU9C,EAAE,SACdiC,SAAS,CAAC,SAAU,UACpBG,SAASpC,EAAE,SACTiC,SAAS,kBACTG,SAASlL,KAAK2L,e,mLAIXzC,EAAclJ,KAAKiJ,MAAnBC,U,oDACW2C,CAAU3C,G,OAA7BlJ,KAAK2B,M,OAEL3B,KAAK2K,MAAQ,IAAIf,EAAA,QACf5J,KAAK0K,SAAS,GACd1K,KAAK2B,MACL,IACA,EACA8I,EAAuBqB,qB,4IAINA,oBAAsB","file":"neural-numbers.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export default class BarChart {\n  constructor(el) {\n    this.el = el;\n    // cleanup potentially previously existing bars\n    this.cleanup();\n\n    this.bars = [];\n    for (let i = 0; i < 10; i += 1) {\n      const cbarcontainer = document.createElement('div');\n      cbarcontainer.className = 'barcontainer';\n      this.bars[i] = document.createElement('div');\n      this.bars[i].classList.add('bar');\n      const cbartext = document.createElement('div');\n      cbartext.className = 'bartxt';\n      cbartext.innerHTML = `${i}`;\n      cbarcontainer.appendChild(this.bars[i]);\n      cbarcontainer.appendChild(cbartext);\n      this.el.appendChild(cbarcontainer);\n    }\n  }\n\n  cleanup() {\n    while (this.el.firstChild) {\n      this.el.removeChild(this.el.firstChild);\n    }\n  }\n\n  update(probabilities, highlighted = -1) {\n    for (let i = 0; i < 10; i += 1) {\n      this.bars[i].dataset.probability = probabilities[i];\n      this.bars[i].style = `--probability: ${probabilities[i]}`;\n      this.bars[i].classList.toggle('highlighted', i === highlighted);\n    }\n  }\n}\n","/* globals tf */\n/* eslint-disable no-bitwise */\nimport BarChart from './BarChart.js';\n\nlet SCALE_FACTOR = 9;\nlet LINEWIDTH = 2 * SCALE_FACTOR;\n\nexport default class Paint {\n  constructor(el, model, outputThreshold, nwvis = false, clearTimeoutTime = 2.2) {\n    this.clearTimeoutTime = clearTimeoutTime;\n    this.drawingChanged = true;\n    this.model = model;\n    this.nwvis = nwvis;\n\n    this.outputThreshold = outputThreshold;\n\n    // last known position\n    this.pos = {\n      x: 0,\n      y: 0,\n    };\n\n    this.createUI(el);\n    this.empty = true;\n    this.isdown = false;\n    this.pointerId = -1;\n  }\n\n  addEventListeners() {\n    this.eventfunctions = {\n      pointerdown: ((e) => {\n        if (!this.isdown) {\n          this.removeClearTimeout();\n          this.setPosition(e);\n          this.isdown = true;\n          this.pointerId = e.pointerId;\n        }\n      }),\n      pointermove: ((e) => {\n        if (this.isdown && (this.pointerId === e.pointerId)) this.draw(e);\n      }),\n      pointerup: ((e) => {\n        if ((this.pointerId === e.pointerId)) {\n          this.setClearTimeout();\n          this.isdown = false;\n        }\n      }),\n      pointerleave: ((e) => {\n        if ((this.pointerId === e.pointerId)) {\n          this.setClearTimeout();\n          this.isdown = false;\n        }\n      }),\n      pointercancel: ((e) => {\n        if ((this.pointerId === e.pointerId)) {\n          this.setClearTimeout();\n          this.isdown = false;\n        }\n      }),\n    };\n\n    for (const eventname in this.eventfunctions) {\n      this.drawcanvas.addEventListener(eventname, this.eventfunctions[eventname], {\n        passive: true,\n      });\n    }\n  }\n\n  removeEventListeners() {\n    for (const eventname in this.eventfunctions) {\n      this.drawcanvas.removeEventListener(eventname, this.eventfunctions[eventname]);\n    }\n  }\n\n  createUI(el) {\n    this.drawcanvas = el.querySelector('.drawcanvas');\n    this.normalizecanvas = el.querySelector('.normalizecanvas') || document.createElement('canvas');\n    this.outputbars = el.querySelector('.bars');\n    this.outputdigit = el.querySelector('.digit');\n    this.inputbox = el.querySelector('.input.box');\n\n    this.addEventListeners();\n\n    const { normalizecanvas, drawcanvas } = this;\n\n    normalizecanvas.width = 28;\n    normalizecanvas.height = 28;\n\n    const updateDimensions = () => {\n      SCALE_FACTOR = Math.floor(this.drawcanvas.clientWidth / 28) - 1;\n      LINEWIDTH = 2 * SCALE_FACTOR;\n      drawcanvas.width = this.drawcanvas.clientWidth;\n      drawcanvas.height = this.drawcanvas.clientWidth;\n    };\n    updateDimensions();\n    window.onresize = () => {\n      updateDimensions();\n    };\n\n    this.drawcontext = this.drawcanvas.getContext('2d', { willReadFrequently: true });\n    this.normalizecontext = this.normalizecanvas.getContext('2d', { willReadFrequently: true });\n    // const { drawcontext, normalizecontext } = this;\n    //  normalizecanvas.style.width = 28 * SCALE_FACTOR + 'px';\n    //  normalizecanvas.style.height = 28 * SCALE_FACTOR + 'px';\n    //  normalizecanvas.style.imageRendering = 'pixelated';\n    /*\n        const resetbutton = document.createElement(\"button\");\n        this.resetbutton = resetbutton;\n        this.resetbutton.style.visibility = 'hidden';\n\n        resetbutton.innerHTML = \"reset\";\n        resetbutton.addEventListener('click', () => {\n          this.drawcontext.fillRect(0, 0, this.drawcanvas.width, this.drawcanvas.height);\n          this.normalize(100);\n          this.predict();\n          this.resetbutton.style.visibility = 'hidden';\n        });\n\n        this.drawcanvas.parentNode.insertBefore(resetbutton, this.drawcanvas);\n        this.resetbutton.style.position = \"absolute\";\n        this.resetbutton.style.zIndex = 10;\n    */\n    if (this.outputbars) {\n      this.barchart = new BarChart(this.outputbars);\n    }\n\n    this.clear();\n  }\n\n\n  setPosition(e) {\n    const rect = this.drawcanvas.getBoundingClientRect();\n    this.pos.x = (e.clientX - rect.left);\n    this.pos.y = (e.clientY - rect.top);\n    return true;\n  }\n\n  removeClearTimeout() {\n    if (this.clearTimeout) {\n      clearTimeout(this.clearTimeout);\n    }\n    return true;\n  }\n\n  setClearTimeout() {\n    this.removeClearTimeout(); // remove previous clearTimeouts\n    // clean up everything after specified time\n    this.clearTimeout = setTimeout(() => {\n      this.clear();\n    }, this.clearTimeoutTime * 1000);\n    return true;\n  }\n\n  draw(e) {\n    this.removeClearTimeout();\n    const ox = this.pos.x;\n    const oy = this.pos.y;\n    this.setPosition(e);\n    const nx = this.pos.x;\n    const ny = this.pos.y;\n    if (Math.abs(nx - ox) + Math.abs(ny - oy) < 3) {\n      this.pos.x = ox;\n      this.pos.y = oy;\n      return;\n    }\n    this.inputbox.classList.remove('background');\n    this.empty = false;\n    this.drawcontext.beginPath(); // begin\n    this.drawcontext.lineWidth = LINEWIDTH;\n    this.drawcontext.lineCap = 'round';\n    this.drawcontext.strokeStyle = 'white';\n\n    this.drawcontext.moveTo(ox, oy); // from\n    this.setPosition(e);\n    this.drawcontext.lineTo(nx, ny); // to\n\n    this.drawcontext.stroke(); // draw it!\n\n    this.normalizecontext.fillStyle = 'black';\n    this.normalizecontext.fillRect(0, 0, this.normalizecanvas.width, this.normalizecanvas.height);\n\n    this.drawingChanged = true;\n    this.normalize(LINEWIDTH);\n    this.predict();\n    // this.resetbutton.style.visibility = 'visible';\n  }\n\n  // normalize image\n  normalize(SKIPFACTOR) {\n    let centerx = 0;\n    let centery = 0;\n    let top = 1000;\n    let bottom = -1000;\n    let left = 1000;\n    let right = -1000;\n    const imgData = this.drawcontext.getImageData(\n      0, 0, this.drawcanvas.width, this.drawcanvas.height\n    );\n    const { data } = imgData;\n    let totalweight = 0;\n    for (let i = 0; i < data.length; i += 4 * SKIPFACTOR) {\n      const x = (i / 4) % this.drawcanvas.width;\n      const y = ((i / 4) / (this.drawcanvas.width)) | 0;\n      totalweight += data[i];\n      centerx += (data[i]) * x;\n      centery += (data[i]) * y;\n\n      if (data[i] > 0) {\n        top = Math.min(top, y);\n        bottom = Math.max(bottom, y);\n        left = Math.min(left, x);\n        right = Math.max(right, x);\n      }\n    }\n    if (totalweight > 0) {\n      centerx /= totalweight;\n      centery /= totalweight;\n\n      const boxsize = Math.max(right - left, bottom - top);\n\n      // according to MNIST normalization:\n      /*\n      The original black and white (bilevel) images from NIST were size normalized\n      to fit in a 20x20 pixel box while preserving their aspect ratio. The\n      resulting images contain grey levels as a result of the anti-aliasing\n      technique used by the normalization algorithm. the images were centered\n      in a 28x28 image by computing the center of mass of the pixels, and\n      translating the image so as to position this point at the center of the 28x28 field.\n      */\n      this.normalizecontext.drawImage(\n        this.drawcanvas,\n        left, top,\n        boxsize, boxsize,\n        14 + (20 / boxsize) * (left - centerx),\n        14 + (20 / boxsize) * (top - centery),\n        20, 20\n      );\n    } else {\n      this.normalizecontext.fillRect(0, 0, this.normalizecanvas.width, this.normalizecanvas.height);\n    }\n\n    return true;\n  }\n\n  predict() {\n    if (this.model && this.normalizecanvas && this.drawingChanged) { // && newFrame rendered TODO?\n      const [probabilities, predicted] = tf.tidy(() => {\n        const imageTensor = tf.browser\n          .fromPixels(this.normalizecanvas, 1)\n          .toFloat()\n          .mul(tf.scalar(1 / 255))\n          .clipByValue(0, 1)\n          .reshape([1, 28, 28, 1]);\n        if (this.nwvis) {\n          this.nwvis.show(imageTensor,\n            this.normalizecontext.getImageData(\n              0, 0,\n              this.normalizecanvas.width, this.normalizecanvas.height\n            ).data.filter((d, k) => (k % 4 === 0)));\n        }\n        const result = this.model.predict(imageTensor);\n        return [\n          result.dataSync(),\n          result.argMax([-1]).dataSync(),\n        ];\n      });\n\n      if (this.barchart) {\n        this.barchart.update(probabilities, predicted);\n      }\n\n      if (this.outputdigit) {\n        this.outputdigit.innerHTML = (!this.empty && probabilities[predicted] > this.outputThreshold) ? predicted : '?';\n        this.outputdigit.parentElement.classList.toggle('solved', probabilities[predicted] > this.outputThreshold);\n      }\n    }\n    return true;\n  }\n\n  swapModel(model) {\n    this.model = model;\n    this.predict();\n  }\n\n  clear() {\n    this.drawcontext.fillRect(0, 0, this.drawcanvas.width, this.drawcanvas.height);\n    this.empty = true;\n    this.normalize(100);\n    this.predict();\n    this.inputbox.classList.add('background');\n  }\n\n  cleanup() {\n    this.clear();\n    this.removeEventListeners();\n\n    // this.predict();\n    // this.resetbutton.style.visibility = 'hidden';\n\n    if (this.barchart) {\n      this.barchart.cleanup();\n    }\n  }\n}\n","import NeuralNumbersComponent from './neural-numbers-component';\n\nfunction attrFlag(attribute, defaultValue) {\n  if (attribute === undefined) {\n    return defaultValue;\n  }\n  return attribute !== 'false';\n}\n\n$('[data-component=neural-numbers]')\n  .each((i, element) => {\n    const props = {\n      modelPath: $(element).attr('data-model') || null,\n      inputPlaceholder: $(element).attr('data-input-placeholder') || '',\n      showBars: attrFlag($(element).attr('data-show-bars'), false),\n      showNormalizer: attrFlag($(element).attr('data-show-normalizer'), false),\n      showTraining: attrFlag($(element).attr('data-show-training'), false),\n      showOutput: attrFlag($(element).attr('data-show-output'), true),\n    };\n    const component = new NeuralNumbersComponent(element, props);\n    component.init();\n  });\n\nif (window.IMAGINARY === undefined) {\n  window.IMAGINARY = {};\n}\n\nif (window.IMAGINARY.NeuralNumbers === undefined) {\n  window.IMAGINARY.NeuralNumbers = NeuralNumbersComponent;\n}\n","/* globals tf */\n\nimport Paint from './Paint';\n\nconst models = {};\n\nasync function loadModel(path) {\n  if (path && !(path in models)) {\n    models[path] = await tf.loadLayersModel(path);\n  }\n  return models[path];\n}\n\nexport default class NeuralNumbersComponent {\n  constructor(element, props) {\n    this.$element = $(element);\n    this.props = props;\n    this.model = null;\n    this.paint = null;\n\n    const {\n      inputPlaceholder,\n      safeInputPlaceholder,\n      showBars,\n      showNormalizer,\n      showTraining,\n      showOutput,\n      verticalBars\n    } = this.props;\n\n    this.$element.addClass('neural-numbers-component');\n    this.$element.toggleClass('with-bars', showBars);\n    this.$element.toggleClass('with-normalizer', showNormalizer);\n    this.$element.toggleClass('with-training', showTraining);\n    this.$element.toggleClass('with-output', showOutput);\n\n    this.$inputStage = $('<div>')\n      .addClass(['stage', 'stage-input', 'input', 'box'])\n      .appendTo(this.$element);\n\n    this.$drawCanvas = $('<canvas>')\n      .addClass(['drawcanvas', 'input-canvas'])\n      .appendTo(\n        $('<div>')\n          .addClass('input-canvas-wrapper')\n          .appendTo(this.$inputStage)\n      );\n\n    if (inputPlaceholder) {\n      $('<div>')\n        .addClass('input-placeholder')\n        .append(\n          $('<span>').html(inputPlaceholder)\n        )\n        .appendTo(this.$inputStage);\n    } else if (safeInputPlaceholder) {\n      $('<div>')\n        .addClass('input-placeholder')\n        .append(\n          $('<span>').text(safeInputPlaceholder)\n        )\n        .appendTo(this.$inputStage);\n    }\n\n    this.$normalizeStage = $('<div>')\n      .addClass(['stage', 'stage-normalize'])\n      .appendTo(this.$element);\n\n    this.$normalizeCanvas = $('<canvas>')\n      .addClass('normalizecanvas')\n      .appendTo($('<div>')\n        .addClass('normalize-canvas-wrapper')\n        .appendTo(this.$normalizeStage));\n\n    this.$probabilityStage = $('<div>')\n      .addClass(['stage', 'stage-bars'])\n      .appendTo(this.$element);\n\n    this.$bars = $('<div>')\n      .addClass('bars')\n      .toggleClass('bars-vertical', verticalBars || false)\n      .appendTo(this.$probabilityStage);\n\n    this.$outputStage = $('<div>')\n      .addClass(['stage', 'stage-output'])\n      .appendTo(this.$element);\n\n    this.$output = $('<div>')\n      .addClass(['output', 'digit'])\n      .appendTo($('<div>')\n        .addClass('output-wrapper')\n        .appendTo(this.$outputStage));\n  }\n\n  async init() {\n    const { modelPath } = this.props;\n    this.model = await loadModel(modelPath);\n\n    this.paint = new Paint(\n      this.$element[0],\n      this.model,\n      0.5,\n      false,\n      NeuralNumbersComponent.PAINT_CLEAR_TIMEOUT);\n  }\n}\n\nNeuralNumbersComponent.PAINT_CLEAR_TIMEOUT = 2.2;\n"]}