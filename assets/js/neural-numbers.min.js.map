{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/BarChart.js","js/MnistData.js","js/NeuralNetwork.js","js/Paint.js","js/main-lib.js","js/neural-numbers-component.js","js/training-component.js","js/training-controller.js","node_modules/events/events.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","BarChart","el","_classCallCheck","this","cleanup","bars","cbarcontainer","document","createElement","className","classList","add","cbartext","innerHTML","concat","appendChild","firstChild","removeChild","probabilities","highlighted","arguments","undefined","dataset","probability","style","toggle","IMAGE_SIZE","NUM_TRAIN_ELEMENTS","NUM_DATASET_ELEMENTS","MnistData","shuffledTrainIndex","shuffledTestIndex","img","Image","canvas","ctx","getContext","willReadFrequently","imgRequest","Promise","resolve","reject","crossOrigin","onload","width","naturalWidth","height","naturalHeight","datasetBytesBuffer","ArrayBuffer","datasetBytesView","Float32Array","drawImage","imageData","getImageData","j","data","_this","datasetImages","src","labelsRequest","fetch","all","labelsResponse","Uint8Array","arrayBuffer","datasetLabels","trainIndices","tf","util","createShuffledIndices","testIndices","trainImages","slice","testImages","trainLabels","NUM_CLASSES","testLabels","batchSize","_this2","nextBatch","_this3","index","batchImagesArray","batchLabelsArray","idx","image","set","label","xs","tensor2d","labels","NeuralNetwork","options","Object","assign","trainingCallback","batchCallback","modelUpdateCallback","training","init","modelid","optimizerid","learningRate","activation","console","log","trainedimages","lastrainedimages","pausecbs","model","dispose","sequential","layers","conv2d","inputShape","kernelSize","filters","strides","kernelInitializer","maxPooling2d","poolSize","flatten","dense","units","optimizer","train","adam","sgd","compile","loss","metrics","TRAIN_DATA_SIZE","BATCH_SIZE","setBackend","tidy","d","nextTrainBatch","reshape","trainXs","trainYs","fit","callbacks","onEpochEnd","_onEpochEnd","_asyncToGenerator","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","apply","onBatchEnd","_onBatchEnd","_callee2","_context2","trainByBatchFromData","Math","min","setTimeout","pop","cb","push","addPauseCallback","pauseTraining","_BarChart","SCALE_FACTOR","LINEWIDTH","Paint","outputThreshold","nwvis","clearTimeoutTime","drawingChanged","pos","x","y","createUI","empty","isdown","pointerId","eventname","eventfunctions","pointerdown","removeClearTimeout","setPosition","pointermove","draw","pointerup","setClearTimeout","pointerleave","pointercancel","drawcanvas","addEventListener","passive","removeEventListener","querySelector","normalizecanvas","outputbars","outputdigit","inputbox","addEventListeners","updateDimensions","floor","clientWidth","window","onresize","drawcontext","normalizecontext","barchart","clear","rect","getBoundingClientRect","clientX","left","clientY","top","clearTimeout","ox","oy","nx","ny","abs","remove","beginPath","lineWidth","lineCap","strokeStyle","moveTo","lineTo","stroke","fillStyle","fillRect","normalize","predict","SKIPFACTOR","boxsize","centerx","centery","bottom","right","totalweight","max","_tf$tidy2","predicted","_this4","_slicedToArray","imageTensor","browser","fromPixels","toFloat","mul","scalar","clipByValue","show","filter","k","result","dataSync","argMax","update","parentElement","removeEventListeners","_neuralNumbersComponent","_interopRequireDefault","_trainingController","_trainingComponent","attrFlag","attribute","defaultValue","$","each","element","props","modelPath","attr","inputPlaceholder","showBars","showNormalizer","showTraining","showOutput","IMAGINARY","NeuralNumbers","NeuralNumbersTrainingController","NeuralNumbersTraining","_Paint","models","path","loadLayersModel","sent","abrupt","NeuralNumbersComponent","$element","defaultModel","paint","_this$props","safeInputPlaceholder","verticalBars","addClass","toggleClass","$inputStage","appendTo","$drawCanvas","append","html","text","$normalizeStage","$normalizeCanvas","$probabilityStage","$bars","$outputStage","$output","loadModel","PAINT_CLEAR_TIMEOUT","swapModel","TrainingComponent","nnComponent","trainingController","imageCountLabelText","$progressBar","$imageCount","$imageCountLabel","$imageCountValue","$controls","$startPauseBtn","on","handleStartPauseBtn","bind","$stepBtn","handleStepBtn","$resetBtn","handleResetBtn","events","handleBatch","handleTrainingStart","handleTrainingPause","disableButtons","enableButtons","isTraining","pause","start","step","reset","imageCount","removeClass","_events","_NeuralNetwork","_MnistData","TrainingController","nn","load","rebuildNetwork","setModel","emit","trainSingleStep","objectCreate","create","proto","F","prototype","objectKeys","keys","obj","hasOwnProperty","Function","context","fn","EventEmitter","_eventsCount","_maxListeners","hasDefineProperty","defaultMaxListeners","defineProperty","value","err","$getMaxListeners","that","_addListener","target","type","listener","prepend","existing","w","m","TypeError","newListener","unshift","warned","String","name","emitter","count","warn","message","onceWrapper","fired","removeListener","wrapFn","args","Array","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","arr","ret","unwrapListeners","arrayClone","listenerCount","copy","enumerable","get","arg","setMaxListeners","isNaN","getMaxListeners","er","handler","doError","error","len","isFn","self","listeners","emitNone","arg1","emitOne","arg2","emitTwo","arg3","emitThree","emitMany","addListener","prependListener","once","prependOnceListener","list","position","originalListener","shift","spliceOne","removeAllListeners","key","rawListeners","eventNames","Reflect","ownKeys"],"mappings":"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","file":"neural-numbers.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export default class BarChart {\n  constructor(el) {\n    this.el = el;\n    // cleanup potentially previously existing bars\n    this.cleanup();\n\n    this.bars = [];\n    for (let i = 0; i < 10; i += 1) {\n      const cbarcontainer = document.createElement('div');\n      cbarcontainer.className = 'barcontainer';\n      this.bars[i] = document.createElement('div');\n      this.bars[i].classList.add('bar');\n      const cbartext = document.createElement('div');\n      cbartext.className = 'bartxt';\n      cbartext.innerHTML = `${i}`;\n      cbarcontainer.appendChild(this.bars[i]);\n      cbarcontainer.appendChild(cbartext);\n      this.el.appendChild(cbarcontainer);\n    }\n  }\n\n  cleanup() {\n    while (this.el.firstChild) {\n      this.el.removeChild(this.el.firstChild);\n    }\n  }\n\n  update(probabilities, highlighted = -1) {\n    for (let i = 0; i < 10; i += 1) {\n      this.bars[i].dataset.probability = probabilities[i];\n      this.bars[i].style = `--probability: ${probabilities[i]}`;\n      this.bars[i].classList.toggle('highlighted', i === highlighted);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst IMAGE_SIZE = 784;\nconst NUM_CLASSES = 10;\nconst NUM_DATASET_ELEMENTS = 65000;\n\nconst NUM_TRAIN_ELEMENTS = NUM_DATASET_ELEMENTS*0.8 | 0; //80% TODO make this custoumizeable\nconst NUM_TEST_ELEMENTS = NUM_DATASET_ELEMENTS - NUM_TRAIN_ELEMENTS;\n\nconst MNIST_IMAGES_SPRITE_PATH =\n    'assets/mnist/mnist_images.png';\nconst MNIST_LABELS_PATH =\n    'assets/mnist/mnist_labels_uint8';\n\n/**\n * A class that fetches the sprited MNIST dataset and returns shuffled batches.\n *\n * NOTE: This will get much easier. For now, we do data fetching and\n * manipulation manually.\n */\nexport class MnistData {\n  constructor() {\n    this.shuffledTrainIndex = 0;\n    this.shuffledTestIndex = 0;\n  }\n\n  async load() {\n    // Make a request for the MNIST sprited image.\n    const img = new Image();\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d', { willReadFrequently: true });\n    const imgRequest = new Promise((resolve, reject) => {\n      img.crossOrigin = '';\n      img.onload = () => {\n        img.width = img.naturalWidth;\n        img.height = img.naturalHeight;\n\n        const datasetBytesBuffer =\n            new ArrayBuffer(NUM_DATASET_ELEMENTS * IMAGE_SIZE * 4);\n\n        const chunkSize = 5000;\n        canvas.width = img.width;\n        canvas.height = chunkSize;\n\n        for (let i = 0; i < NUM_DATASET_ELEMENTS / chunkSize; i++) {\n          const datasetBytesView = new Float32Array(\n              datasetBytesBuffer, i * IMAGE_SIZE * chunkSize * 4,\n              IMAGE_SIZE * chunkSize);\n          ctx.drawImage(\n              img, 0, i * chunkSize, img.width, chunkSize, 0, 0, img.width,\n              chunkSize);\n\n          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n          for (let j = 0; j < imageData.data.length / 4; j++) {\n            // All channels hold an equal value since the image is grayscale, so\n            // just read the red channel.\n            datasetBytesView[j] = imageData.data[j * 4] / 255;\n          }\n        }\n        this.datasetImages = new Float32Array(datasetBytesBuffer);\n\n        resolve();\n      };\n      img.src = MNIST_IMAGES_SPRITE_PATH;\n    });\n\n    const labelsRequest = fetch(MNIST_LABELS_PATH);\n    const [imgResponse, labelsResponse] =\n        await Promise.all([imgRequest, labelsRequest]);\n\n    this.datasetLabels = new Uint8Array(await labelsResponse.arrayBuffer());\n    // Create shuffled indices into the train/test set for when we select a\n    // random dataset element for training / validation.\n    this.trainIndices = tf.util.createShuffledIndices(NUM_TRAIN_ELEMENTS);\n    this.testIndices = tf.util.createShuffledIndices(NUM_TEST_ELEMENTS);\n\n    // Slice the the images and labels into train and test sets.\n    this.trainImages =\n        this.datasetImages.slice(0, IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\n    this.testImages = this.datasetImages.slice(IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\n    this.trainLabels =\n        this.datasetLabels.slice(0, NUM_CLASSES * NUM_TRAIN_ELEMENTS);\n    this.testLabels =\n        this.datasetLabels.slice(NUM_CLASSES * NUM_TRAIN_ELEMENTS);\n  }\n\n  nextTrainBatch(batchSize) {\n    return this.nextBatch(\n        batchSize, [this.trainImages, this.trainLabels], () => {\n          this.shuffledTrainIndex =\n              (this.shuffledTrainIndex + 1) % this.trainIndices.length;\n          return this.trainIndices[this.shuffledTrainIndex];\n        });\n  }\n\n  nextTestBatch(batchSize) {\n    return this.nextBatch(batchSize, [this.testImages, this.testLabels], () => {\n      this.shuffledTestIndex =\n          (this.shuffledTestIndex + 1) % this.testIndices.length;\n      return this.testIndices[this.shuffledTestIndex];\n    });\n  }\n\n  nextBatch(batchSize, data, index) {\n    const batchImagesArray = new Float32Array(batchSize * IMAGE_SIZE);\n    const batchLabelsArray = new Uint8Array(batchSize * NUM_CLASSES);\n\n    for (let i = 0; i < batchSize; i++) {\n      const idx = index();\n\n      const image =\n          data[0].slice(idx * IMAGE_SIZE, idx * IMAGE_SIZE + IMAGE_SIZE);\n      batchImagesArray.set(image, i * IMAGE_SIZE);\n\n      const label =\n          data[1].slice(idx * NUM_CLASSES, idx * NUM_CLASSES + NUM_CLASSES);\n      batchLabelsArray.set(label, i * NUM_CLASSES);\n    }\n\n    const xs = tf.tensor2d(batchImagesArray, [batchSize, IMAGE_SIZE]);\n    const labels = tf.tensor2d(batchLabelsArray, [batchSize, NUM_CLASSES]);\n\n    return {xs, labels};\n  }\n}\n","/* eslint-disable no-await-in-loop */\n/* jshint esversion: 8 */\n/* globals tf */\n\nexport default class NeuralNetwork {\n  constructor(options) {\n    this.options = Object.assign({}, {\n      trainingCallback: null,\n      batchCallback: null,\n      modelUpdateCallback: null,\n    }, options);\n    this.training = false;\n    this.init();\n  }\n\n  init(modelid = 'dense', optimizerid = 'adam', learningRate = 0.001, activation = 'relu') {\n    // eslint-disable-next-line no-console\n    console.log(`Setting up NN model=${modelid} optimizer=${optimizerid} learningrate=${learningRate} activation=${activation}`);\n    this.modelid = modelid;\n    this.trainedimages = 0;\n    this.lastrainedimages = 0;\n    this.pausecbs = [];\n\n    if (this.options.batchCallback) {\n      this.options.batchCallback(this.trainedimages);\n    }\n\n    // delete old model if it has been existing\n    if (this.model) {\n      this.model.dispose();\n    }\n\n    // create model\n    this.model = tf.sequential();\n    const { model } = this;\n\n    const IMAGE_WIDTH = 28;\n    const IMAGE_HEIGHT = 28;\n    const IMAGE_CHANNELS = 1;\n\n    if (modelid === 'cnn') {\n      // CNN\n      // In the first layer of our convolutional neural network we have\n      // to specify the input shape. Then we specify some parameters for\n      // the convolution operation that takes place in this layer.\n      model.add(tf.layers.conv2d({\n        inputShape: [IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS],\n        kernelSize: 5,\n        filters: 8,\n        strides: 1,\n        activation,\n        kernelInitializer: 'varianceScaling',\n      }));\n\n      // The MaxPooling layer acts as a sort of downsampling using max values\n      // in a region instead of averaging.\n      model.add(tf.layers.maxPooling2d({\n        poolSize: [2, 2],\n        strides: [2, 2],\n      }));\n\n      // Repeat another conv2d + maxPooling stack.\n      // Note that we have more filters in the convolution.\n      model.add(tf.layers.conv2d({\n        kernelSize: 5,\n        filters: 16,\n        strides: 1,\n        activation,\n        kernelInitializer: 'varianceScaling',\n      }));\n      model.add(tf.layers.maxPooling2d({\n        poolSize: [2, 2],\n        strides: [2, 2],\n      }));\n\n      // Now we flatten the output from the 2D filters into a 1D vector to prepare\n      // it for input into our last layer. This is common practice when feeding\n      // higher dimensional data to a final classification output layer.\n      model.add(tf.layers.flatten());\n    } else if (modelid === 'dense') {\n      model.add(\n        tf.layers.flatten({\n          inputShape: [IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS],\n        })\n      );\n\n      model.add(tf.layers.dense({\n        units: 100,\n        activation,\n        kernelInitializer: 'varianceScaling',\n      }));\n    } else if (modelid === 'nohidden') {\n      model.add(\n        tf.layers.flatten({\n          inputShape: [IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS],\n        })\n      );\n    }\n\n    // Our last layer is a dense layer which has 10 output units, one for each\n    // output class (i.e. 0, 1, 2, 3, 4, 5, 6, 7, 8, 9).\n    const NUM_OUTPUT_CLASSES = 10;\n    model.add(tf.layers.dense({\n      units: NUM_OUTPUT_CLASSES,\n      kernelInitializer: 'varianceScaling',\n      activation: 'softmax',\n    }));\n\n    // Choose an optimizer, loss function and accuracy metric,\n    // then compile and return the model\n    const optimizer = (optimizerid === 'adam') ? tf.train.adam(learningRate) : tf.train.sgd(learningRate);\n    // tf.train.adam(learningRate);\n\n    model.compile({\n      optimizer,\n      loss: 'categoricalCrossentropy',\n      // optimizer: 'sgd',\n      // loss: 'meanSquaredError',\n      metrics: ['accuracy'],\n    });\n\n    return model;\n  }\n\n  async trainByBatchFromData(data, TRAIN_DATA_SIZE, BATCH_SIZE) {\n    if (TRAIN_DATA_SIZE === 1 || BATCH_SIZE === 1) {\n      tf.setBackend('cpu');\n      // fitting with single training-data results in NaNs when WebGL-backend is used\n      // for unknown reasons. Unfortunately, mixing cpu ang webgl backend changes the\n      // training in some way: Way more input images are required to obtain same accuracy\n    }\n    const { model } = this;\n    const [trainXs, trainYs] = tf.tidy(() => {\n      const d = data.nextTrainBatch(TRAIN_DATA_SIZE);\n      return [\n        d.xs.reshape([TRAIN_DATA_SIZE, 28, 28, 1]),\n        d.labels,\n      ];\n    });\n\n    if (this.options.trainingCallback) {\n      await this.options.trainingCallback(trainXs, trainYs);\n    }\n\n    await model.fit(trainXs, trainYs, {\n      batchSize: BATCH_SIZE,\n      callbacks: {\n        onEpochEnd: async () => {},\n        onBatchEnd: async () => {\n          this.trainedimages += BATCH_SIZE;\n          if (this.options.batchCallback) {\n            this.options.batchCallback(this.trainedimages);\n          }\n        },\n      },\n    });\n    tf.dispose(trainXs);\n    tf.dispose(trainYs);\n\n    if (TRAIN_DATA_SIZE === 1 || BATCH_SIZE === 1) {\n      tf.setBackend('webgl');\n      // fitting with single training-data results in NaNs when WebGL-backend\n      // is used for unknown reasons\n    }\n  }\n\n  async trainSingleStep(data) {\n    await this.trainByBatchFromData(data, 1, 1);\n    if (this.options.modelUpdateCallback) {\n      this.options.modelUpdateCallback(this.model);\n    }\n  }\n\n  async train(data) {\n    this.training = true;\n\n    while (this.training) {\n      // start slower in beginning, increase step size with time\n      // const BATCH_SIZE = 1 << (Math.max(4, Math.min(8, this.trainedimages / 20 | 0)));\n      // a sequence of increasing powers of two\n\n      // a constant BATCH_SIZE and TRAIN_DATA_SIZE increases the speed of convergence :/.\n      const BATCH_SIZE = 32;\n      const TRAIN_DATA_SIZE = 32; // *Math.min(8, Math.max(1, this.trainedimages / 40 | 0));\n\n      await this.trainByBatchFromData(data, BATCH_SIZE, TRAIN_DATA_SIZE);\n\n      if (this.trainedimages\n        > this.lastrainedimages + Math.min(1000, 0.3 * this.trainedimages)\n        || this.trainedimages < 250) {\n        if (this.options.modelUpdateCallback) {\n          this.options.modelUpdateCallback(this.model);\n        }\n        if ((this.trainedimages < 100)) {\n          // sleep some time per image\n          await new Promise(resolve => setTimeout(\n            resolve,\n            (1000 / (5 + 4 * this.trainedimages)) * (this.trainedimages - this.lastrainedimages)\n          ));\n        }\n        this.lastrainedimages = this.trainedimages;\n      }\n    }\n\n    while (this.pausecbs.length > 0) {\n      (this.pausecbs.pop())();\n    }\n  }\n\n  addPauseCallback(cb) {\n    this.pausecbs.push(cb);\n  }\n\n  pauseTraining() {\n    return new Promise((resolve) => {\n      if (this.training) {\n        this.addPauseCallback(resolve);\n        this.training = false;\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  isTraining() {\n    return this.training;\n  }\n\n  async toggleTraining(data) {\n    if (this.training) {\n      await this.pauseTraining();\n    } else {\n      await this.train(data);\n    }\n  }\n\n  cleanup() {\n    this.model.dispose();\n    this.trainedimages = 0;\n    this.lastrainedimages = 0;\n  }\n}\n","/* globals tf */\n/* eslint-disable no-bitwise */\nimport BarChart from './BarChart.js';\n\nlet SCALE_FACTOR = 9;\nlet LINEWIDTH = 2 * SCALE_FACTOR;\n\nexport default class Paint {\n  constructor(el, model, outputThreshold, nwvis = false, clearTimeoutTime = 2.2) {\n    this.clearTimeoutTime = clearTimeoutTime;\n    this.drawingChanged = true;\n    this.model = model;\n    this.nwvis = nwvis;\n\n    this.outputThreshold = outputThreshold;\n\n    // last known position\n    this.pos = {\n      x: 0,\n      y: 0,\n    };\n\n    this.createUI(el);\n    this.empty = true;\n    this.isdown = false;\n    this.pointerId = -1;\n  }\n\n  addEventListeners() {\n    this.eventfunctions = {\n      pointerdown: ((e) => {\n        if (!this.isdown) {\n          this.removeClearTimeout();\n          this.setPosition(e);\n          this.isdown = true;\n          this.pointerId = e.pointerId;\n        }\n      }),\n      pointermove: ((e) => {\n        if (this.isdown && (this.pointerId === e.pointerId)) this.draw(e);\n      }),\n      pointerup: ((e) => {\n        if ((this.pointerId === e.pointerId)) {\n          this.setClearTimeout();\n          this.isdown = false;\n        }\n      }),\n      pointerleave: ((e) => {\n        if ((this.pointerId === e.pointerId)) {\n          this.setClearTimeout();\n          this.isdown = false;\n        }\n      }),\n      pointercancel: ((e) => {\n        if ((this.pointerId === e.pointerId)) {\n          this.setClearTimeout();\n          this.isdown = false;\n        }\n      }),\n    };\n\n    for (const eventname in this.eventfunctions) {\n      this.drawcanvas.addEventListener(eventname, this.eventfunctions[eventname], {\n        passive: true,\n      });\n    }\n  }\n\n  removeEventListeners() {\n    for (const eventname in this.eventfunctions) {\n      this.drawcanvas.removeEventListener(eventname, this.eventfunctions[eventname]);\n    }\n  }\n\n  createUI(el) {\n    this.drawcanvas = el.querySelector('.drawcanvas');\n    this.normalizecanvas = el.querySelector('.normalizecanvas') || document.createElement('canvas');\n    this.outputbars = el.querySelector('.bars');\n    this.outputdigit = el.querySelector('.digit');\n    this.inputbox = el.querySelector('.input.box');\n\n    this.addEventListeners();\n\n    const { normalizecanvas, drawcanvas } = this;\n\n    normalizecanvas.width = 28;\n    normalizecanvas.height = 28;\n\n    const updateDimensions = () => {\n      SCALE_FACTOR = Math.floor(this.drawcanvas.clientWidth / 28) - 1;\n      LINEWIDTH = 2 * SCALE_FACTOR;\n      drawcanvas.width = this.drawcanvas.clientWidth;\n      drawcanvas.height = this.drawcanvas.clientWidth;\n    };\n    updateDimensions();\n    window.onresize = () => {\n      updateDimensions();\n    };\n\n    this.drawcontext = this.drawcanvas.getContext('2d', { willReadFrequently: true });\n    this.normalizecontext = this.normalizecanvas.getContext('2d', { willReadFrequently: true });\n    // const { drawcontext, normalizecontext } = this;\n    //  normalizecanvas.style.width = 28 * SCALE_FACTOR + 'px';\n    //  normalizecanvas.style.height = 28 * SCALE_FACTOR + 'px';\n    //  normalizecanvas.style.imageRendering = 'pixelated';\n    /*\n        const resetbutton = document.createElement(\"button\");\n        this.resetbutton = resetbutton;\n        this.resetbutton.style.visibility = 'hidden';\n\n        resetbutton.innerHTML = \"reset\";\n        resetbutton.addEventListener('click', () => {\n          this.drawcontext.fillRect(0, 0, this.drawcanvas.width, this.drawcanvas.height);\n          this.normalize(100);\n          this.predict();\n          this.resetbutton.style.visibility = 'hidden';\n        });\n\n        this.drawcanvas.parentNode.insertBefore(resetbutton, this.drawcanvas);\n        this.resetbutton.style.position = \"absolute\";\n        this.resetbutton.style.zIndex = 10;\n    */\n    if (this.outputbars) {\n      this.barchart = new BarChart(this.outputbars);\n    }\n\n    this.clear();\n  }\n\n\n  setPosition(e) {\n    const rect = this.drawcanvas.getBoundingClientRect();\n    this.pos.x = (e.clientX - rect.left);\n    this.pos.y = (e.clientY - rect.top);\n    return true;\n  }\n\n  removeClearTimeout() {\n    if (this.clearTimeout) {\n      clearTimeout(this.clearTimeout);\n    }\n    return true;\n  }\n\n  setClearTimeout() {\n    this.removeClearTimeout(); // remove previous clearTimeouts\n    // clean up everything after specified time\n    this.clearTimeout = setTimeout(() => {\n      this.clear();\n    }, this.clearTimeoutTime * 1000);\n    return true;\n  }\n\n  draw(e) {\n    this.removeClearTimeout();\n    const ox = this.pos.x;\n    const oy = this.pos.y;\n    this.setPosition(e);\n    const nx = this.pos.x;\n    const ny = this.pos.y;\n    if (Math.abs(nx - ox) + Math.abs(ny - oy) < 3) {\n      this.pos.x = ox;\n      this.pos.y = oy;\n      return;\n    }\n    this.inputbox.classList.remove('background');\n    this.empty = false;\n    this.drawcontext.beginPath(); // begin\n    this.drawcontext.lineWidth = LINEWIDTH;\n    this.drawcontext.lineCap = 'round';\n    this.drawcontext.strokeStyle = 'white';\n\n    this.drawcontext.moveTo(ox, oy); // from\n    this.setPosition(e);\n    this.drawcontext.lineTo(nx, ny); // to\n\n    this.drawcontext.stroke(); // draw it!\n\n    this.normalizecontext.fillStyle = 'black';\n    this.normalizecontext.fillRect(0, 0, this.normalizecanvas.width, this.normalizecanvas.height);\n\n    this.drawingChanged = true;\n    this.normalize(LINEWIDTH);\n    this.predict();\n    // this.resetbutton.style.visibility = 'visible';\n  }\n\n  // normalize image\n  normalize(SKIPFACTOR) {\n    let centerx = 0;\n    let centery = 0;\n    let top = 1000;\n    let bottom = -1000;\n    let left = 1000;\n    let right = -1000;\n    const imgData = this.drawcontext.getImageData(\n      0, 0, this.drawcanvas.width, this.drawcanvas.height\n    );\n    const { data } = imgData;\n    let totalweight = 0;\n    for (let i = 0; i < data.length; i += 4 * SKIPFACTOR) {\n      const x = (i / 4) % this.drawcanvas.width;\n      const y = ((i / 4) / (this.drawcanvas.width)) | 0;\n      totalweight += data[i];\n      centerx += (data[i]) * x;\n      centery += (data[i]) * y;\n\n      if (data[i] > 0) {\n        top = Math.min(top, y);\n        bottom = Math.max(bottom, y);\n        left = Math.min(left, x);\n        right = Math.max(right, x);\n      }\n    }\n    if (totalweight > 0) {\n      centerx /= totalweight;\n      centery /= totalweight;\n\n      const boxsize = Math.max(right - left, bottom - top);\n\n      // according to MNIST normalization:\n      /*\n      The original black and white (bilevel) images from NIST were size normalized\n      to fit in a 20x20 pixel box while preserving their aspect ratio. The\n      resulting images contain grey levels as a result of the anti-aliasing\n      technique used by the normalization algorithm. the images were centered\n      in a 28x28 image by computing the center of mass of the pixels, and\n      translating the image so as to position this point at the center of the 28x28 field.\n      */\n      this.normalizecontext.drawImage(\n        this.drawcanvas,\n        left, top,\n        boxsize, boxsize,\n        14 + (20 / boxsize) * (left - centerx),\n        14 + (20 / boxsize) * (top - centery),\n        20, 20\n      );\n    } else {\n      this.normalizecontext.fillRect(0, 0, this.normalizecanvas.width, this.normalizecanvas.height);\n    }\n\n    return true;\n  }\n\n  predict() {\n    if (this.model && this.normalizecanvas && this.drawingChanged) { // && newFrame rendered TODO?\n      const [probabilities, predicted] = tf.tidy(() => {\n        const imageTensor = tf.browser\n          .fromPixels(this.normalizecanvas, 1)\n          .toFloat()\n          .mul(tf.scalar(1 / 255))\n          .clipByValue(0, 1)\n          .reshape([1, 28, 28, 1]);\n        if (this.nwvis) {\n          this.nwvis.show(imageTensor,\n            this.normalizecontext.getImageData(\n              0, 0,\n              this.normalizecanvas.width, this.normalizecanvas.height\n            ).data.filter((d, k) => (k % 4 === 0)));\n        }\n        const result = this.model.predict(imageTensor);\n        return [\n          result.dataSync(),\n          result.argMax([-1]).dataSync(),\n        ];\n      });\n\n      if (this.barchart) {\n        this.barchart.update(probabilities, predicted);\n      }\n\n      if (this.outputdigit) {\n        this.outputdigit.innerHTML = (!this.empty && probabilities[predicted] > this.outputThreshold) ? predicted : '?';\n        this.outputdigit.parentElement.classList.toggle('solved', probabilities[predicted] > this.outputThreshold);\n      }\n    }\n    return true;\n  }\n\n  swapModel(model) {\n    this.model = model;\n    this.predict();\n  }\n\n  clear() {\n    this.drawcontext.fillRect(0, 0, this.drawcanvas.width, this.drawcanvas.height);\n    this.empty = true;\n    this.normalize(100);\n    this.predict();\n    this.inputbox.classList.add('background');\n  }\n\n  cleanup() {\n    this.clear();\n    this.removeEventListeners();\n\n    // this.predict();\n    // this.resetbutton.style.visibility = 'hidden';\n\n    if (this.barchart) {\n      this.barchart.cleanup();\n    }\n  }\n}\n","import NeuralNumbersComponent from './neural-numbers-component';\nimport TrainingController from './training-controller';\nimport TrainingComponent from \"./training-component\";\n\nfunction attrFlag(attribute, defaultValue) {\n  if (attribute === undefined) {\n    return defaultValue;\n  }\n  return attribute !== 'false';\n}\n\n$('[data-component=neural-numbers]')\n  .each((i, element) => {\n    const props = {\n      modelPath: $(element).attr('data-model') || null,\n      inputPlaceholder: $(element).attr('data-input-placeholder') || '',\n      showBars: attrFlag($(element).attr('data-show-bars'), false),\n      showNormalizer: attrFlag($(element).attr('data-show-normalizer'), false),\n      showTraining: attrFlag($(element).attr('data-show-training'), false),\n      showOutput: attrFlag($(element).attr('data-show-output'), true),\n    };\n    const component = new NeuralNumbersComponent(element, props);\n    component.init();\n  });\n\nif (window.IMAGINARY === undefined) {\n  window.IMAGINARY = {};\n}\n\nif (window.IMAGINARY.NeuralNumbers === undefined) {\n  window.IMAGINARY.NeuralNumbers = NeuralNumbersComponent;\n  window.IMAGINARY.NeuralNumbersTrainingController = TrainingController;\n  window.IMAGINARY.NeuralNumbersTraining = TrainingComponent;\n}\n","/* globals tf */\n\nimport Paint from './Paint';\n\nconst models = {};\n\nasync function loadModel(path) {\n  if (path && !(path in models)) {\n    models[path] = await tf.loadLayersModel(path);\n  }\n  return models[path];\n}\n\nexport default class NeuralNumbersComponent {\n  constructor(element, props) {\n    this.$element = $(element);\n    this.props = props;\n    this.defaultModel = null;\n    this.model = null;\n    this.paint = null;\n\n    const {\n      inputPlaceholder,\n      safeInputPlaceholder,\n      showBars,\n      showNormalizer,\n      showTraining,\n      showOutput,\n      verticalBars\n    } = this.props;\n\n    this.$element.addClass('neural-numbers-component');\n    this.$element.toggleClass('with-bars', showBars);\n    this.$element.toggleClass('with-normalizer', showNormalizer);\n    this.$element.toggleClass('with-training', showTraining);\n    this.$element.toggleClass('with-output', showOutput);\n\n    this.$inputStage = $('<div>')\n      .addClass(['stage', 'stage-input', 'input', 'box'])\n      .appendTo(this.$element);\n\n    this.$drawCanvas = $('<canvas>')\n      .addClass(['drawcanvas', 'input-canvas'])\n      .appendTo(\n        $('<div>')\n          .addClass('input-canvas-wrapper')\n          .appendTo(this.$inputStage)\n      );\n\n    if (inputPlaceholder) {\n      $('<div>')\n        .addClass('input-placeholder')\n        .append(\n          $('<span>').html(inputPlaceholder)\n        )\n        .appendTo(this.$inputStage);\n    } else if (safeInputPlaceholder) {\n      $('<div>')\n        .addClass('input-placeholder')\n        .append(\n          $('<span>').text(safeInputPlaceholder)\n        )\n        .appendTo(this.$inputStage);\n    }\n\n    this.$normalizeStage = $('<div>')\n      .addClass(['stage', 'stage-normalize'])\n      .appendTo(this.$element);\n\n    this.$normalizeCanvas = $('<canvas>')\n      .addClass('normalizecanvas')\n      .appendTo($('<div>')\n        .addClass('normalize-canvas-wrapper')\n        .appendTo(this.$normalizeStage));\n\n    this.$probabilityStage = $('<div>')\n      .addClass(['stage', 'stage-bars'])\n      .appendTo(this.$element);\n\n    this.$bars = $('<div>')\n      .addClass('bars')\n      .toggleClass('bars-vertical', verticalBars || false)\n      .appendTo(this.$probabilityStage);\n\n    this.$outputStage = $('<div>')\n      .addClass(['stage', 'stage-output'])\n      .appendTo(this.$element);\n\n    this.$output = $('<div>')\n      .addClass(['output', 'digit'])\n      .appendTo($('<div>')\n        .addClass('output-wrapper')\n        .appendTo(this.$outputStage));\n  }\n\n  async init() {\n    const { modelPath } = this.props;\n    this.defaultModel = await loadModel(modelPath);\n    this.model = this.defaultModel;\n\n    this.paint = new Paint(\n      this.$element[0],\n      this.model,\n      0.5,\n      false,\n      NeuralNumbersComponent.PAINT_CLEAR_TIMEOUT);\n  }\n\n  setModel(model = null) {\n    if (model === null) {\n      model = this.defaultModel;\n    }\n    this.model = model;\n    this.paint.swapModel(model);\n  }\n}\n\nNeuralNumbersComponent.PAINT_CLEAR_TIMEOUT = 2.2;\n","import TrainingController from \"./training-controller\";\n\nexport default class TrainingComponent {\n    constructor(nnComponent, element, props = {}) {\n        this.trainingController = new TrainingController(nnComponent);\n        this.$element = $(element);\n        this.props = Object.assign({}, {\n            imageCountLabelText: 'Images used:',\n        }, props);\n\n        this.$element.addClass('neural-numbers-training-component');\n\n        this.$progressBar = $('<div>')\n            .addClass('progress-bar')\n            .appendTo(this.$element);\n\n        this.$imageCount = $('<div>')\n            .addClass('image-count')\n            .appendTo(this.$progressBar);\n\n        this.$imageCountLabel = $('<span>')\n            .addClass('image-count-label')\n            .html(this.props.imageCountLabelText)\n            .appendTo(this.$imageCount);\n\n        this.$imageCountValue = $('<span>')\n            .addClass('image-count-value')\n            .appendTo(this.$imageCount);\n\n        this.$controls = $('<div>')\n            .addClass('controls')\n            .appendTo(this.$element);\n\n        this.$startPauseBtn = $('<button>')\n            .addClass(['start-pause-btn', 'btn'])\n            .text('Start')\n            .on('click', this.handleStartPauseBtn.bind(this))\n            .appendTo(this.$controls);\n\n        this.$stepBtn = $('<button>')\n            .addClass(['step-btn', 'btn'])\n            .text('Step')\n            .on('click', this.handleStepBtn.bind(this))\n            .appendTo(this.$controls);\n\n        this.$resetBtn = $('<button>')\n            .addClass(['reset-btn', 'btn'])\n            .text('Reset')\n            .on('click', this.handleResetBtn.bind(this))\n            .appendTo(this.$controls);\n\n        this.trainingController.events.on('batch', this.handleBatch.bind(this));\n        this.trainingController.events.on('start', this.handleTrainingStart.bind(this));\n        this.trainingController.events.on('pause', this.handleTrainingPause.bind(this));\n\n        this.disableButtons();\n    }\n\n    async init() {\n        await this.trainingController.init();\n        this.enableButtons();\n    }\n\n    disableButtons() {\n        this.$startPauseBtn.attr('disabled', true);\n        this.$stepBtn.attr('disabled', true);\n        this.$resetBtn.attr('disabled', true);\n    }\n\n    enableButtons() {\n        this.$startPauseBtn.attr('disabled', false);\n        this.$stepBtn.attr('disabled', false);\n        this.$resetBtn.attr('disabled', false);\n    }\n\n    handleStartPauseBtn() {\n        if (this.trainingController.isTraining()) {\n            this.trainingController.pause();\n        } else {\n            this.trainingController.start();\n        }\n    }\n\n    handleStepBtn() {\n        this.trainingController.step();\n    }\n\n    handleResetBtn() {\n        this.trainingController.reset();\n    }\n\n    handleBatch(imageCount) {\n        this.$imageCountValue.text(imageCount);\n    }\n\n    handleTrainingStart() {\n        this.$startPauseBtn.text('Pause');\n        this.$element.addClass('running');\n    }\n\n    handleTrainingPause() {\n        this.$startPauseBtn.text('Start');\n        this.$element.removeClass('running');\n    }\n}\n","import EventEmitter from 'events';\nimport NeuralNetwork from './NeuralNetwork';\nimport { MnistData } from './MnistData';\n\nexport default class TrainingController {\n  constructor(nnComponent) {\n    this.nnComponent = nnComponent;\n    this.events = new EventEmitter();\n\n    this.nn = new NeuralNetwork({\n      batchCallback: this.handleBatch.bind(this),\n    });\n    this.data = new MnistData();\n  }\n\n  async init() {\n    await this.data.load();\n    this.rebuildNetwork();\n  }\n\n  rebuildNetwork() {\n    this.nn.init();\n    this.nnComponent.setModel(this.nn.model);\n  }\n\n  isTraining() {\n    return this.nn.isTraining();\n  }\n\n  async start() {\n    this.events.emit('start');\n    await this.nn.train(this.data);\n  }\n\n  async pause() {\n    await this.nn.pauseTraining();\n    this.events.emit('pause');\n  }\n\n  async step() {\n    await this.nn.trainSingleStep(this.data);\n  }\n\n  async reset() {\n    await this.nn.pauseTraining();\n    this.rebuildNetwork();\n  }\n\n  handleBatch(imageCount) {\n    this.events.emit('batch', imageCount);\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n"]}