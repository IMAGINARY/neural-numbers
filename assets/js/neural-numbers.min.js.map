{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/BarChart.js","js/MnistData.js","js/NeuralNetwork.js","js/Paint.js","js/main-lib.js","js/neural-numbers-component.js","js/training-component.js","js/training-controller.js","js/training-viz.js","node_modules/events/events.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","BarChart","el","_classCallCheck","this","cleanup","bars","cbarcontainer","document","createElement","className","classList","add","cbartext","innerHTML","concat","appendChild","firstChild","removeChild","probabilities","highlighted","arguments","undefined","dataset","probability","style","toggle","IMAGE_SIZE","NUM_TRAIN_ELEMENTS","NUM_DATASET_ELEMENTS","MNIST_IMAGES_SPRITE_PATH","MNIST_LABELS_PATH","MnistData","imagePath","labelPath","shuffledTrainIndex","shuffledTestIndex","img","Image","canvas","ctx","getContext","willReadFrequently","imgRequest","Promise","resolve","reject","crossOrigin","onload","width","naturalWidth","height","naturalHeight","datasetBytesBuffer","ArrayBuffer","datasetBytesView","Float32Array","drawImage","imageData","getImageData","j","data","_this","datasetImages","src","labelsRequest","fetch","all","labelsResponse","Uint8Array","arrayBuffer","datasetLabels","trainIndices","tf","util","createShuffledIndices","testIndices","trainImages","slice","testImages","trainLabels","NUM_CLASSES","testLabels","batchSize","_this2","nextBatch","_this3","index","batchImagesArray","batchLabelsArray","idx","image","set","label","xs","tensor2d","labels","NeuralNetwork","options","Object","assign","trainingCallback","batchCallback","modelUpdateCallback","modelUpdateAsyncCallback","training","init","modelid","optimizerid","learningRate","activation","console","log","trainedimages","lastrainedimages","pausecbs","model","dispose","sequential","layers","conv2d","inputShape","kernelSize","filters","strides","kernelInitializer","maxPooling2d","poolSize","flatten","dense","units","optimizer","train","adam","sgd","compile","loss","metrics","TRAIN_DATA_SIZE","BATCH_SIZE","setBackend","tidy","d","nextTrainBatch","reshape","trainXs","trainYs","fit","callbacks","onEpochEnd","_onEpochEnd","_asyncToGenerator","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","apply","onBatchEnd","_onBatchEnd","_callee2","_context2","trainByBatchFromData","Math","min","setTimeout","pop","cb","push","addPauseCallback","pauseTraining","_BarChart","SCALE_FACTOR","LINEWIDTH","Paint","outputThreshold","nwvis","clearTimeoutTime","drawingChanged","barchart","drawingActive","clearOnInput","pos","x","y","createUI","empty","isdown","pointerId","eventname","eventfunctions","pointerdown","clear","removeClearTimeout","setPosition","pointermove","draw","pointerup","setClearTimeout","pointerleave","pointercancel","drawcanvas","addEventListener","passive","removeEventListener","querySelector","normalizecanvas","outputbars","outputdigit","inputbox","addEventListeners","updateDimensions","floor","clientWidth","window","onresize","drawcontext","normalizecontext","rect","getBoundingClientRect","scaleX","scaleY","clientX","left","clientY","top","clearTimeout","ox","oy","nx","ny","abs","hidePlaceholder","beginPath","lineWidth","lineCap","strokeStyle","moveTo","lineTo","stroke","fillStyle","fillRect","normalize","predict","SKIPFACTOR","boxsize","centerx","centery","bottom","right","totalweight","max","_tf$tidy2","predicted","_this4","_slicedToArray","imageTensor","browser","fromPixels","toFloat","mul","scalar","clipByValue","show","filter","k","result","dataSync","argMax","update","parentElement","showPlaceholder","removeEventListeners","remove","_neuralNumbersComponent","_interopRequireDefault","_trainingController","_trainingComponent","attrFlag","attribute","defaultValue","$","each","element","props","modelPath","attr","inputPlaceholder","showBars","showNormalizer","showOutput","IMAGINARY","NeuralNumbers","NeuralNumbersTrainingController","NeuralNumbersTraining","_Paint","models","path","loadLayersModel","sent","abrupt","NeuralNumbersComponent","$element","defaultModel","paint","_this$props","safeInputPlaceholder","classes","verticalBars","addClass","toggleClass","$inputStage","appendTo","$drawCanvas","placeholderText","html","text","append","$normalizeStage","$normalizeCanvas","$probabilityStage","$bars","$outputStage","$output","loadModel","PAINT_CLEAR_TIMEOUT","swapModel","disableDrawing","enableDrawing","setClearOnInput","TrainingComponent","nnComponent","trainingController","imageCountLabelText","predictedAccuracyLabelText","$controlsL","$progress","$imageCount","$imageCountLabel","$imageCountValue","$accuracy","$accuracyLabel","$accuracyValue","$controlsR","$startPauseBtn","on","handleStartPauseBtn","bind","$stepBtn","handleStepBtn","$resetBtn","handleResetBtn","events","handleBatch","handleAccuracy","handleTrainingStart","handleTrainingPause","handleTrainingComplete","handleTrainingReset","disableButtons","enableButtons","isTraining","pause","start","step","reset","imageCount","accuracy","round","removeClass","disableTrainingButtons","enableTrainingButtons","_events","_NeuralNetwork","_trainingViz","_MnistData","TrainingController","maxTrainingImages","trainingImagePath","trainingLabelPath","nn","handleTraining","handleModelUpdate","trainingViz","load","rebuildNetwork","setModel","emit","pauseTrainingNow","trainSingleStep","setCurrentTraining","estimateAccuracy","TrainingViz","drawCanvas","drawCanvasCtx","trainDigitBuffer","trainX1","toPixels","active","currentDigit","computeActivations","trainY1","currentTarget","renderNetwork","renderActivations","input","A1","A2","A3","_A3$argMax$dataSync2","prediction","_prediction$argMax$da2","intermediateActivations","map","currentProbabilities","clearRect","destOrigin","destSize","clearActivations","getBarChart","testDataSize","nextTestBatch","testXs","testYs","evaluate","objectCreate","create","proto","F","prototype","objectKeys","keys","obj","hasOwnProperty","Function","context","fn","EventEmitter","_eventsCount","_maxListeners","hasDefineProperty","defaultMaxListeners","defineProperty","value","err","$getMaxListeners","that","_addListener","target","type","listener","prepend","existing","w","m","TypeError","newListener","unshift","warned","String","name","emitter","count","warn","message","onceWrapper","fired","removeListener","wrapFn","args","Array","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","arr","ret","unwrapListeners","arrayClone","listenerCount","copy","enumerable","get","arg","setMaxListeners","isNaN","getMaxListeners","er","handler","doError","error","len","isFn","self","listeners","emitNone","arg1","emitOne","arg2","emitTwo","arg3","emitThree","emitMany","addListener","prependListener","once","prependOnceListener","list","position","originalListener","shift","spliceOne","removeAllListeners","key","rawListeners","eventNames","Reflect","ownKeys"],"mappings":"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","file":"neural-numbers.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export default class BarChart {\n  constructor(el) {\n    this.el = el;\n    // cleanup potentially previously existing bars\n    this.cleanup();\n\n    this.bars = [];\n    for (let i = 0; i < 10; i += 1) {\n      const cbarcontainer = document.createElement('div');\n      cbarcontainer.className = 'barcontainer';\n      this.bars[i] = document.createElement('div');\n      this.bars[i].classList.add('bar');\n      const cbartext = document.createElement('div');\n      cbartext.className = 'bartxt';\n      cbartext.innerHTML = `${i}`;\n      cbarcontainer.appendChild(this.bars[i]);\n      cbarcontainer.appendChild(cbartext);\n      this.el.appendChild(cbarcontainer);\n    }\n  }\n\n  cleanup() {\n    while (this.el.firstChild) {\n      this.el.removeChild(this.el.firstChild);\n    }\n  }\n\n  update(probabilities, highlighted = -1) {\n    for (let i = 0; i < 10; i += 1) {\n      this.bars[i].dataset.probability = probabilities[i];\n      this.bars[i].style = `--probability: ${probabilities[i]}`;\n      this.bars[i].classList.toggle('highlighted', i === highlighted);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst IMAGE_SIZE = 784;\nconst NUM_CLASSES = 10;\nconst NUM_DATASET_ELEMENTS = 65000;\n\nconst NUM_TRAIN_ELEMENTS = NUM_DATASET_ELEMENTS*0.8 | 0; //80% TODO make this custoumizeable\nconst NUM_TEST_ELEMENTS = NUM_DATASET_ELEMENTS - NUM_TRAIN_ELEMENTS;\n\nconst MNIST_IMAGES_SPRITE_PATH =\n    'assets/mnist/mnist_images.png';\nconst MNIST_LABELS_PATH =\n    'assets/mnist/mnist_labels_uint8';\n\n/**\n * A class that fetches the sprited MNIST dataset and returns shuffled batches.\n *\n * NOTE: This will get much easier. For now, we do data fetching and\n * manipulation manually.\n */\nexport class MnistData {\n  constructor(imagePath = MNIST_IMAGES_SPRITE_PATH, labelPath = MNIST_LABELS_PATH) {\n    this.shuffledTrainIndex = 0;\n    this.shuffledTestIndex = 0;\n    this.imagePath = imagePath;\n    this.labelPath = labelPath;\n  }\n\n  async load() {\n    // Make a request for the MNIST sprited image.\n    const img = new Image();\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d', { willReadFrequently: true });\n    const imgRequest = new Promise((resolve, reject) => {\n      img.crossOrigin = '';\n      img.onload = () => {\n        img.width = img.naturalWidth;\n        img.height = img.naturalHeight;\n\n        const datasetBytesBuffer =\n            new ArrayBuffer(NUM_DATASET_ELEMENTS * IMAGE_SIZE * 4);\n\n        const chunkSize = 5000;\n        canvas.width = img.width;\n        canvas.height = chunkSize;\n\n        for (let i = 0; i < NUM_DATASET_ELEMENTS / chunkSize; i++) {\n          const datasetBytesView = new Float32Array(\n              datasetBytesBuffer, i * IMAGE_SIZE * chunkSize * 4,\n              IMAGE_SIZE * chunkSize);\n          ctx.drawImage(\n              img, 0, i * chunkSize, img.width, chunkSize, 0, 0, img.width,\n              chunkSize);\n\n          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n          for (let j = 0; j < imageData.data.length / 4; j++) {\n            // All channels hold an equal value since the image is grayscale, so\n            // just read the red channel.\n            datasetBytesView[j] = imageData.data[j * 4] / 255;\n          }\n        }\n        this.datasetImages = new Float32Array(datasetBytesBuffer);\n\n        resolve();\n      };\n      img.src = this.imagePath;\n    });\n\n    const labelsRequest = fetch(this.labelPath);\n    const [imgResponse, labelsResponse] =\n        await Promise.all([imgRequest, labelsRequest]);\n\n    this.datasetLabels = new Uint8Array(await labelsResponse.arrayBuffer());\n    // Create shuffled indices into the train/test set for when we select a\n    // random dataset element for training / validation.\n    this.trainIndices = tf.util.createShuffledIndices(NUM_TRAIN_ELEMENTS);\n    this.testIndices = tf.util.createShuffledIndices(NUM_TEST_ELEMENTS);\n\n    // Slice the the images and labels into train and test sets.\n    this.trainImages =\n        this.datasetImages.slice(0, IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\n    this.testImages = this.datasetImages.slice(IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\n    this.trainLabels =\n        this.datasetLabels.slice(0, NUM_CLASSES * NUM_TRAIN_ELEMENTS);\n    this.testLabels =\n        this.datasetLabels.slice(NUM_CLASSES * NUM_TRAIN_ELEMENTS);\n  }\n\n  nextTrainBatch(batchSize) {\n    return this.nextBatch(\n        batchSize, [this.trainImages, this.trainLabels], () => {\n          this.shuffledTrainIndex =\n              (this.shuffledTrainIndex + 1) % this.trainIndices.length;\n          return this.trainIndices[this.shuffledTrainIndex];\n        });\n  }\n\n  nextTestBatch(batchSize) {\n    return this.nextBatch(batchSize, [this.testImages, this.testLabels], () => {\n      this.shuffledTestIndex =\n          (this.shuffledTestIndex + 1) % this.testIndices.length;\n      return this.testIndices[this.shuffledTestIndex];\n    });\n  }\n\n  nextBatch(batchSize, data, index) {\n    const batchImagesArray = new Float32Array(batchSize * IMAGE_SIZE);\n    const batchLabelsArray = new Uint8Array(batchSize * NUM_CLASSES);\n\n    for (let i = 0; i < batchSize; i++) {\n      const idx = index();\n\n      const image =\n          data[0].slice(idx * IMAGE_SIZE, idx * IMAGE_SIZE + IMAGE_SIZE);\n      batchImagesArray.set(image, i * IMAGE_SIZE);\n\n      const label =\n          data[1].slice(idx * NUM_CLASSES, idx * NUM_CLASSES + NUM_CLASSES);\n      batchLabelsArray.set(label, i * NUM_CLASSES);\n    }\n\n    const xs = tf.tensor2d(batchImagesArray, [batchSize, IMAGE_SIZE]);\n    const labels = tf.tensor2d(batchLabelsArray, [batchSize, NUM_CLASSES]);\n\n    return {xs, labels};\n  }\n}\n","/* eslint-disable no-await-in-loop */\n/* jshint esversion: 8 */\n/* globals tf */\n\nexport default class NeuralNetwork {\n  constructor(options) {\n    this.options = Object.assign({}, {\n      trainingCallback: null,\n      batchCallback: null,\n      modelUpdateCallback: null,\n      modelUpdateAsyncCallback: null,\n    }, options);\n    this.training = false;\n    this.init();\n  }\n\n  init(modelid = 'dense', optimizerid = 'adam', learningRate = 0.001, activation = 'relu') {\n    // eslint-disable-next-line no-console\n    console.log(`Setting up NN model=${modelid} optimizer=${optimizerid} learningrate=${learningRate} activation=${activation}`);\n    this.modelid = modelid;\n    this.trainedimages = 0;\n    this.lastrainedimages = 0;\n    this.pausecbs = [];\n\n    if (this.options.batchCallback) {\n      this.options.batchCallback(this.trainedimages);\n    }\n\n    // delete old model if it has been existing\n    if (this.model) {\n      this.model.dispose();\n    }\n\n    // create model\n    this.model = tf.sequential();\n    const { model } = this;\n\n    const IMAGE_WIDTH = 28;\n    const IMAGE_HEIGHT = 28;\n    const IMAGE_CHANNELS = 1;\n\n    if (modelid === 'cnn') {\n      // CNN\n      // In the first layer of our convolutional neural network we have\n      // to specify the input shape. Then we specify some parameters for\n      // the convolution operation that takes place in this layer.\n      model.add(tf.layers.conv2d({\n        inputShape: [IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS],\n        kernelSize: 5,\n        filters: 8,\n        strides: 1,\n        activation,\n        kernelInitializer: 'varianceScaling',\n      }));\n\n      // The MaxPooling layer acts as a sort of downsampling using max values\n      // in a region instead of averaging.\n      model.add(tf.layers.maxPooling2d({\n        poolSize: [2, 2],\n        strides: [2, 2],\n      }));\n\n      // Repeat another conv2d + maxPooling stack.\n      // Note that we have more filters in the convolution.\n      model.add(tf.layers.conv2d({\n        kernelSize: 5,\n        filters: 16,\n        strides: 1,\n        activation,\n        kernelInitializer: 'varianceScaling',\n      }));\n      model.add(tf.layers.maxPooling2d({\n        poolSize: [2, 2],\n        strides: [2, 2],\n      }));\n\n      // Now we flatten the output from the 2D filters into a 1D vector to prepare\n      // it for input into our last layer. This is common practice when feeding\n      // higher dimensional data to a final classification output layer.\n      model.add(tf.layers.flatten());\n    } else if (modelid === 'dense') {\n      model.add(\n        tf.layers.flatten({\n          inputShape: [IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS],\n        })\n      );\n\n      model.add(tf.layers.dense({\n        units: 100,\n        activation,\n        kernelInitializer: 'varianceScaling',\n      }));\n    } else if (modelid === 'nohidden') {\n      model.add(\n        tf.layers.flatten({\n          inputShape: [IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS],\n        })\n      );\n    }\n\n    // Our last layer is a dense layer which has 10 output units, one for each\n    // output class (i.e. 0, 1, 2, 3, 4, 5, 6, 7, 8, 9).\n    const NUM_OUTPUT_CLASSES = 10;\n    model.add(tf.layers.dense({\n      units: NUM_OUTPUT_CLASSES,\n      kernelInitializer: 'varianceScaling',\n      activation: 'softmax',\n    }));\n\n    // Choose an optimizer, loss function and accuracy metric,\n    // then compile and return the model\n    const optimizer = (optimizerid === 'adam') ? tf.train.adam(learningRate) : tf.train.sgd(learningRate);\n    // tf.train.adam(learningRate);\n\n    model.compile({\n      optimizer,\n      loss: 'categoricalCrossentropy',\n      // optimizer: 'sgd',\n      // loss: 'meanSquaredError',\n      metrics: ['accuracy'],\n    });\n\n    return model;\n  }\n\n  async trainByBatchFromData(data, TRAIN_DATA_SIZE, BATCH_SIZE) {\n    if (TRAIN_DATA_SIZE === 1 || BATCH_SIZE === 1) {\n      tf.setBackend('cpu');\n      // fitting with single training-data results in NaNs when WebGL-backend is used\n      // for unknown reasons. Unfortunately, mixing cpu ang webgl backend changes the\n      // training in some way: Way more input images are required to obtain same accuracy\n    }\n    const { model } = this;\n    const [trainXs, trainYs] = tf.tidy(() => {\n      const d = data.nextTrainBatch(TRAIN_DATA_SIZE);\n      return [\n        d.xs.reshape([TRAIN_DATA_SIZE, 28, 28, 1]),\n        d.labels,\n      ];\n    });\n\n    if (this.options.trainingCallback) {\n      await this.options.trainingCallback(trainXs, trainYs);\n    }\n\n    await model.fit(trainXs, trainYs, {\n      batchSize: BATCH_SIZE,\n      callbacks: {\n        onEpochEnd: async () => {},\n        onBatchEnd: async () => {\n          this.trainedimages += BATCH_SIZE;\n          if (this.options.batchCallback) {\n            this.options.batchCallback(this.trainedimages);\n          }\n        },\n      },\n    });\n    tf.dispose(trainXs);\n    tf.dispose(trainYs);\n\n    if (TRAIN_DATA_SIZE === 1 || BATCH_SIZE === 1) {\n      tf.setBackend('webgl');\n      // fitting with single training-data results in NaNs when WebGL-backend\n      // is used for unknown reasons\n    }\n  }\n\n  async trainSingleStep(data) {\n    await this.trainByBatchFromData(data, 1, 1);\n    if (this.options.modelUpdateCallback) {\n      this.options.modelUpdateCallback(this.model);\n    }\n    if (this.options.modelUpdateAsyncCallback) {\n      await this.options.modelUpdateAsyncCallback(this.model);\n    }\n  }\n\n  async train(data) {\n    this.training = true;\n\n    while (this.training) {\n      // start slower in beginning, increase step size with time\n      // const BATCH_SIZE = 1 << (Math.max(4, Math.min(8, this.trainedimages / 20 | 0)));\n      // a sequence of increasing powers of two\n\n      // a constant BATCH_SIZE and TRAIN_DATA_SIZE increases the speed of convergence :/.\n      const BATCH_SIZE = 32;\n      const TRAIN_DATA_SIZE = 32; // *Math.min(8, Math.max(1, this.trainedimages / 40 | 0));\n\n      await this.trainByBatchFromData(data, BATCH_SIZE, TRAIN_DATA_SIZE);\n\n      if (this.trainedimages\n        > this.lastrainedimages + Math.min(1000, 0.3 * this.trainedimages)\n        || this.trainedimages < 250) {\n        if (this.options.modelUpdateCallback) {\n          this.options.modelUpdateCallback(this.model);\n        }\n        if (this.options.modelUpdateAsyncCallback) {\n          await this.options.modelUpdateAsyncCallback(this.model);\n        }\n        if ((this.trainedimages < 100)) {\n          // sleep some time per image\n          await new Promise(resolve => setTimeout(\n            resolve,\n            (1000 / (5 + 4 * this.trainedimages)) * (this.trainedimages - this.lastrainedimages)\n          ));\n        }\n        this.lastrainedimages = this.trainedimages;\n      }\n    }\n\n    while (this.pausecbs.length > 0) {\n      (this.pausecbs.pop())();\n    }\n  }\n\n  addPauseCallback(cb) {\n    this.pausecbs.push(cb);\n  }\n\n  pauseTrainingNow() {\n    this.training = false;\n  }\n\n  pauseTraining() {\n    return new Promise((resolve) => {\n      if (this.training) {\n        this.addPauseCallback(resolve);\n        this.training = false;\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  isTraining() {\n    return this.training;\n  }\n\n  async toggleTraining(data) {\n    if (this.training) {\n      await this.pauseTraining();\n    } else {\n      await this.train(data);\n    }\n  }\n\n  cleanup() {\n    this.model.dispose();\n    this.trainedimages = 0;\n    this.lastrainedimages = 0;\n  }\n}\n","/* globals tf */\n/* eslint-disable no-bitwise */\nimport BarChart from './BarChart.js';\n\nlet SCALE_FACTOR = 9;\nlet LINEWIDTH = 2 * SCALE_FACTOR;\n\nexport default class Paint {\n  constructor(el, model, outputThreshold, nwvis = false, clearTimeoutTime = 2.2) {\n    this.clearTimeoutTime = clearTimeoutTime;\n    this.drawingChanged = true;\n    this.model = model;\n    this.nwvis = nwvis;\n    this.barchart = null;\n    this.drawingActive = true;\n    this.clearOnInput = false;\n\n    this.outputThreshold = outputThreshold;\n\n    // last known position\n    this.pos = {\n      x: 0,\n      y: 0,\n    };\n\n    this.createUI(el);\n    this.empty = true;\n    this.isdown = false;\n    this.pointerId = -1;\n  }\n\n  addEventListeners() {\n    this.eventfunctions = {\n      pointerdown: ((e) => {\n        if (!this.isdown && this.drawingActive) {\n          if (this.clearOnInput) {\n            this.clear();\n          }\n          this.removeClearTimeout();\n          this.setPosition(e);\n          this.isdown = true;\n          this.pointerId = e.pointerId;\n        }\n      }),\n      pointermove: ((e) => {\n        if (this.isdown && this.drawingActive && (this.pointerId === e.pointerId)) {\n          this.draw(e);\n        }\n      }),\n      pointerup: ((e) => {\n        if (this.drawingActive && (this.pointerId === e.pointerId)) {\n          this.setClearTimeout();\n          this.isdown = false;\n        }\n      }),\n      pointerleave: ((e) => {\n        if (this.drawingActive && (this.pointerId === e.pointerId)) {\n          this.setClearTimeout();\n          this.isdown = false;\n        }\n      }),\n      pointercancel: ((e) => {\n        if (this.drawingActive && (this.pointerId === e.pointerId)) {\n          this.setClearTimeout();\n          this.isdown = false;\n        }\n      }),\n    };\n\n    for (const eventname in this.eventfunctions) {\n      this.drawcanvas.addEventListener(eventname, this.eventfunctions[eventname], {\n        passive: true,\n      });\n    }\n  }\n\n  removeEventListeners() {\n    for (const eventname in this.eventfunctions) {\n      this.drawcanvas.removeEventListener(eventname, this.eventfunctions[eventname]);\n    }\n  }\n\n  createUI(el) {\n    this.drawcanvas = el.querySelector('.drawcanvas');\n    this.normalizecanvas = el.querySelector('.normalizecanvas') || document.createElement('canvas');\n    this.outputbars = el.querySelector('.bars');\n    this.outputdigit = el.querySelector('.digit');\n    this.inputbox = el.querySelector('.input.box');\n\n    this.addEventListeners();\n\n    const { normalizecanvas, drawcanvas } = this;\n\n    normalizecanvas.width = 28;\n    normalizecanvas.height = 28;\n\n    const updateDimensions = () => {\n      SCALE_FACTOR = Math.floor(this.drawcanvas.clientWidth / 28) - 1;\n      LINEWIDTH = 2 * SCALE_FACTOR;\n      drawcanvas.width = this.drawcanvas.clientWidth;\n      drawcanvas.height = this.drawcanvas.clientWidth;\n    };\n    updateDimensions();\n    window.onresize = () => {\n      updateDimensions();\n    };\n\n    this.drawcontext = this.drawcanvas.getContext('2d', { willReadFrequently: true });\n    this.normalizecontext = this.normalizecanvas.getContext('2d', { willReadFrequently: true });\n    // const { drawcontext, normalizecontext } = this;\n    //  normalizecanvas.style.width = 28 * SCALE_FACTOR + 'px';\n    //  normalizecanvas.style.height = 28 * SCALE_FACTOR + 'px';\n    //  normalizecanvas.style.imageRendering = 'pixelated';\n    /*\n        const resetbutton = document.createElement(\"button\");\n        this.resetbutton = resetbutton;\n        this.resetbutton.style.visibility = 'hidden';\n\n        resetbutton.innerHTML = \"reset\";\n        resetbutton.addEventListener('click', () => {\n          this.drawcontext.fillRect(0, 0, this.drawcanvas.width, this.drawcanvas.height);\n          this.normalize(100);\n          this.predict();\n          this.resetbutton.style.visibility = 'hidden';\n        });\n\n        this.drawcanvas.parentNode.insertBefore(resetbutton, this.drawcanvas);\n        this.resetbutton.style.position = \"absolute\";\n        this.resetbutton.style.zIndex = 10;\n    */\n    if (this.outputbars) {\n      this.barchart = new BarChart(this.outputbars);\n    }\n\n    this.clear();\n  }\n\n\n  setPosition(e) {\n    const rect = this.drawcanvas.getBoundingClientRect();\n    const scaleX = this.drawcanvas.width / rect.width;\n    const scaleY = this.drawcanvas.height / rect.height;\n\n    this.pos.x = (e.clientX - rect.left) * scaleX;\n    this.pos.y = (e.clientY - rect.top) * scaleY;\n    return true;\n  }\n\n  removeClearTimeout() {\n    if (this.clearTimeout) {\n      clearTimeout(this.clearTimeout);\n    }\n    return true;\n  }\n\n  setClearTimeout() {\n    this.removeClearTimeout(); // remove previous clearTimeouts\n    // clean up everything after specified time\n    this.clearTimeout = setTimeout(() => {\n      this.clear();\n    }, this.clearTimeoutTime * 1000);\n    return true;\n  }\n\n  setClearOnInput() {\n    this.clearOnInput = true;\n  }\n\n  draw(e) {\n    this.removeClearTimeout();\n    const ox = this.pos.x;\n    const oy = this.pos.y;\n    this.setPosition(e);\n    const nx = this.pos.x;\n    const ny = this.pos.y;\n    if (Math.abs(nx - ox) + Math.abs(ny - oy) < 3) {\n      this.pos.x = ox;\n      this.pos.y = oy;\n      return;\n    }\n    this.hidePlaceholder();\n    this.empty = false;\n    this.drawcontext.beginPath(); // begin\n    this.drawcontext.lineWidth = LINEWIDTH;\n    this.drawcontext.lineCap = 'round';\n    this.drawcontext.strokeStyle = 'white';\n\n    this.drawcontext.moveTo(ox, oy); // from\n    this.setPosition(e);\n    this.drawcontext.lineTo(nx, ny); // to\n\n    this.drawcontext.stroke(); // draw it!\n\n    this.normalizecontext.fillStyle = 'black';\n    this.normalizecontext.fillRect(0, 0, this.normalizecanvas.width, this.normalizecanvas.height);\n\n    this.drawingChanged = true;\n    this.normalize(LINEWIDTH);\n    this.predict();\n    // this.resetbutton.style.visibility = 'visible';\n  }\n\n  // normalize image\n  normalize(SKIPFACTOR) {\n    let centerx = 0;\n    let centery = 0;\n    let top = 1000;\n    let bottom = -1000;\n    let left = 1000;\n    let right = -1000;\n    const imgData = this.drawcontext.getImageData(\n      0, 0, this.drawcanvas.width, this.drawcanvas.height\n    );\n    const { data } = imgData;\n    let totalweight = 0;\n    for (let i = 0; i < data.length; i += 4 * SKIPFACTOR) {\n      const x = (i / 4) % this.drawcanvas.width;\n      const y = ((i / 4) / (this.drawcanvas.width)) | 0;\n      totalweight += data[i];\n      centerx += (data[i]) * x;\n      centery += (data[i]) * y;\n\n      if (data[i] > 0) {\n        top = Math.min(top, y);\n        bottom = Math.max(bottom, y);\n        left = Math.min(left, x);\n        right = Math.max(right, x);\n      }\n    }\n    if (totalweight > 0) {\n      centerx /= totalweight;\n      centery /= totalweight;\n\n      const boxsize = Math.max(right - left, bottom - top);\n\n      // according to MNIST normalization:\n      /*\n      The original black and white (bilevel) images from NIST were size normalized\n      to fit in a 20x20 pixel box while preserving their aspect ratio. The\n      resulting images contain grey levels as a result of the anti-aliasing\n      technique used by the normalization algorithm. the images were centered\n      in a 28x28 image by computing the center of mass of the pixels, and\n      translating the image so as to position this point at the center of the 28x28 field.\n      */\n      this.normalizecontext.drawImage(\n        this.drawcanvas,\n        left, top,\n        boxsize, boxsize,\n        14 + (20 / boxsize) * (left - centerx),\n        14 + (20 / boxsize) * (top - centery),\n        20, 20\n      );\n    } else {\n      this.normalizecontext.fillRect(0, 0, this.normalizecanvas.width, this.normalizecanvas.height);\n    }\n\n    return true;\n  }\n\n  predict() {\n    if (this.model && this.normalizecanvas && this.drawingChanged) { // && newFrame rendered TODO?\n      const [probabilities, predicted] = tf.tidy(() => {\n        const imageTensor = tf.browser\n          .fromPixels(this.normalizecanvas, 1)\n          .toFloat()\n          .mul(tf.scalar(1 / 255))\n          .clipByValue(0, 1)\n          .reshape([1, 28, 28, 1]);\n        if (this.nwvis) {\n          this.nwvis.show(imageTensor,\n            this.normalizecontext.getImageData(\n              0, 0,\n              this.normalizecanvas.width, this.normalizecanvas.height\n            ).data.filter((d, k) => (k % 4 === 0)));\n        }\n        const result = this.model.predict(imageTensor);\n        return [\n          result.dataSync(),\n          result.argMax([-1]).dataSync(),\n        ];\n      });\n\n      if (this.barchart) {\n        this.barchart.update(probabilities, predicted);\n      }\n\n      if (this.outputdigit) {\n        this.outputdigit.innerHTML = (!this.empty && probabilities[predicted] > this.outputThreshold) ? predicted : '?';\n        this.outputdigit.parentElement.classList.toggle('solved', probabilities[predicted] > this.outputThreshold);\n      }\n    }\n    return true;\n  }\n\n  swapModel(model) {\n    this.model = model;\n    this.predict();\n  }\n\n  clear() {\n    this.clearOnInput = false;\n    this.drawcontext.fillRect(0, 0, this.drawcanvas.width, this.drawcanvas.height);\n    this.empty = true;\n    this.normalize(100);\n    this.predict();\n    this.showPlaceholder();\n  }\n\n  cleanup() {\n    this.clear();\n    this.removeEventListeners();\n\n    // this.predict();\n    // this.resetbutton.style.visibility = 'hidden';\n\n    if (this.barchart) {\n      this.barchart.cleanup();\n    }\n  }\n\n  showPlaceholder() {\n    this.inputbox.classList.add('background');\n  }\n\n  hidePlaceholder() {\n    this.inputbox.classList.remove('background');\n  }\n\n  disableDrawing() {\n    this.drawingActive = false;\n    this.isdown = false;\n  }\n\n  enableDrawing() {\n    this.drawingActive = true;\n  }\n}\n","import NeuralNumbersComponent from './neural-numbers-component';\nimport TrainingController from './training-controller';\nimport TrainingComponent from \"./training-component\";\n\nfunction attrFlag(attribute, defaultValue) {\n  if (attribute === undefined) {\n    return defaultValue;\n  }\n  return attribute !== 'false';\n}\n\n$('[data-component=neural-numbers]')\n  .each((i, element) => {\n    const props = {\n      modelPath: $(element).attr('data-model') || null,\n      inputPlaceholder: $(element).attr('data-input-placeholder') || '',\n      showBars: attrFlag($(element).attr('data-show-bars'), false),\n      showNormalizer: attrFlag($(element).attr('data-show-normalizer'), false),\n      showOutput: attrFlag($(element).attr('data-show-output'), true),\n    };\n    const component = new NeuralNumbersComponent(element, props);\n    component.init();\n  });\n\nif (window.IMAGINARY === undefined) {\n  window.IMAGINARY = {};\n}\n\nif (window.IMAGINARY.NeuralNumbers === undefined) {\n  window.IMAGINARY.NeuralNumbers = NeuralNumbersComponent;\n  window.IMAGINARY.NeuralNumbersTrainingController = TrainingController;\n  window.IMAGINARY.NeuralNumbersTraining = TrainingComponent;\n}\n","/* globals tf */\n\nimport Paint from './Paint';\n\nconst models = {};\n\nasync function loadModel(path) {\n  if (path && !(path in models)) {\n    models[path] = await tf.loadLayersModel(path);\n  }\n  return models[path];\n}\n\nexport default class NeuralNumbersComponent {\n  constructor(element, props) {\n    this.$element = $(element);\n    this.props = props;\n    this.defaultModel = null;\n    this.model = null;\n    this.paint = null;\n\n    const {\n      inputPlaceholder,\n      safeInputPlaceholder,\n      classes,\n      showBars,\n      showNormalizer,\n      showOutput,\n      verticalBars\n    } = this.props;\n\n    this.$element.addClass('neural-numbers-component');\n    this.$element.toggleClass('with-bars', showBars);\n    this.$element.toggleClass('with-normalizer', showNormalizer);\n    this.$element.toggleClass('with-output', showOutput);\n    if (classes) {\n      this.$element.addClass(classes);\n    }\n\n    this.$inputStage = $('<div>')\n      .addClass(['stage', 'stage-input', 'input', 'box'])\n      .appendTo(this.$element);\n\n    this.$drawCanvas = $('<canvas>')\n      .addClass(['drawcanvas', 'input-canvas'])\n      .appendTo(\n        $('<div>')\n          .addClass('input-canvas-wrapper')\n          .appendTo(this.$inputStage)\n      );\n\n    const placeholderText = $('<span>');\n    if (inputPlaceholder) {\n      placeholderText.html(inputPlaceholder);\n    } else if (safeInputPlaceholder) {\n      placeholderText.text(safeInputPlaceholder);\n    }\n    $('<div>')\n        .addClass('input-placeholder')\n        .append(placeholderText)\n        .appendTo(this.$inputStage);\n\n    this.$normalizeStage = $('<div>')\n      .addClass(['stage', 'stage-normalize'])\n      .appendTo(this.$element);\n\n    this.$normalizeCanvas = $('<canvas>')\n      .addClass('normalizecanvas')\n      .appendTo($('<div>')\n        .addClass('normalize-canvas-wrapper')\n        .appendTo(this.$normalizeStage));\n\n    this.$probabilityStage = $('<div>')\n      .addClass(['stage', 'stage-bars'])\n      .appendTo(this.$element);\n\n    this.$bars = $('<div>')\n      .addClass('bars')\n      .toggleClass('bars-vertical', verticalBars || false)\n      .appendTo(this.$probabilityStage);\n\n    this.$outputStage = $('<div>')\n      .addClass(['stage', 'stage-output'])\n      .appendTo(this.$element);\n\n    this.$output = $('<div>')\n      .addClass(['output', 'digit'])\n      .appendTo($('<div>')\n        .addClass('output-wrapper')\n        .appendTo(this.$outputStage));\n  }\n\n  async init() {\n    const { modelPath } = this.props;\n    this.defaultModel = await loadModel(modelPath);\n    this.model = this.defaultModel;\n\n    this.paint = new Paint(\n      this.$element[0],\n      this.model,\n      0.5,\n      false,\n      NeuralNumbersComponent.PAINT_CLEAR_TIMEOUT);\n  }\n\n  setModel(model = null) {\n    if (model === null) {\n      model = this.defaultModel;\n    }\n    this.model = model;\n    this.paint.swapModel(model);\n  }\n\n  getBarChart() {\n    return this.paint.barchart;\n  }\n\n  disableDrawing() {\n    this.paint.disableDrawing();\n  }\n\n  enableDrawing() {\n    this.paint.enableDrawing();\n  }\n\n  setClearTimeout() {\n    this.paint.setClearTimeout();\n  }\n\n  setClearOnInput() {\n    this.paint.setClearOnInput();\n  }\n\n  hidePlaceholder() {\n    this.paint.hidePlaceholder();\n  }\n\n  showPlaceholder() {\n    this.paint.showPlaceholder();\n  }\n}\n\nNeuralNumbersComponent.PAINT_CLEAR_TIMEOUT = 2.2;\n","import TrainingController from \"./training-controller\";\n\nexport default class TrainingComponent {\n    constructor(nnComponent, element, props = {}) {\n        this.trainingController = new TrainingController(nnComponent, props);\n        this.nnComponent = nnComponent;\n        this.$element = $(element);\n        this.props = Object.assign({}, {\n            imageCountLabelText: 'Images used:',\n            predictedAccuracyLabelText: 'Predicted accuracy:',\n        }, props);\n\n        this.$element.addClass('neural-numbers-training-component');\n\n        this.$controlsL = $('<div>')\n            .addClass(['controls', 'controls-l'])\n            .appendTo(this.$element);\n\n        this.$progress = $('<div>')\n            .addClass('training-progress')\n            .appendTo(this.$element);\n\n        this.$imageCount = $('<div>')\n            .addClass('image-count')\n            .appendTo(this.$progress);\n\n        this.$imageCountLabel = $('<div>')\n            .addClass('image-count-label')\n            .html(this.props.imageCountLabelText)\n            .appendTo(this.$imageCount);\n\n        this.$imageCountValue = $('<div>')\n            .addClass('image-count-value')\n            .appendTo(this.$imageCount);\n\n        this.$accuracy = $('<div>')\n            .addClass('accuracy')\n            .appendTo(this.$progress);\n\n        this.$accuracyLabel = $('<div>')\n            .addClass('accuracy-label')\n            .html(this.props.predictedAccuracyLabelText)\n            .appendTo(this.$accuracy);\n\n        this.$accuracyValue = $('<div>')\n            .addClass('accuracy-value')\n            .appendTo(this.$accuracy);\n\n        this.$controlsR = $('<div>')\n            .addClass(['controls', 'controls-r'])\n            .appendTo(this.$element);\n\n        this.$startPauseBtn = $('<button>')\n            .addClass(['start-pause-btn', 'btn'])\n            .text('Start')\n            .on('click', this.handleStartPauseBtn.bind(this))\n            .appendTo(this.$controlsL);\n\n        this.$stepBtn = $('<button>')\n            .addClass(['step-btn', 'btn'])\n            .text('Step')\n            .on('click', this.handleStepBtn.bind(this))\n            .appendTo(this.$controlsL);\n\n        this.$resetBtn = $('<button>')\n            .addClass(['reset-btn', 'btn'])\n            .text('Reset')\n            .on('click', this.handleResetBtn.bind(this))\n            .appendTo(this.$controlsR);\n\n        this.trainingController.events.on('batch', this.handleBatch.bind(this));\n        this.trainingController.events.on('accuracy', this.handleAccuracy.bind(this));\n        this.trainingController.events.on('start', this.handleTrainingStart.bind(this));\n        this.trainingController.events.on('pause', this.handleTrainingPause.bind(this));\n        this.trainingController.events.on('training-complete', this.handleTrainingComplete.bind(this));\n        this.trainingController.events.on('reset', this.handleTrainingReset.bind(this));\n\n        this.disableButtons();\n    }\n\n    async init() {\n        await this.trainingController.init();\n        this.enableButtons();\n    }\n\n    disableButtons() {\n        this.$startPauseBtn.attr('disabled', true);\n        this.$stepBtn.attr('disabled', true);\n        this.$resetBtn.attr('disabled', true);\n    }\n\n    enableButtons() {\n        this.$startPauseBtn.attr('disabled', false);\n        this.$stepBtn.attr('disabled', false);\n        this.$resetBtn.attr('disabled', false);\n    }\n\n    disableTrainingButtons() {\n        this.$startPauseBtn.attr('disabled', true);\n        this.$stepBtn.attr('disabled', true);\n    }\n\n    enableTrainingButtons() {\n        this.$startPauseBtn.attr('disabled', false);\n        this.$stepBtn.attr('disabled', false);\n    }\n\n    handleStartPauseBtn() {\n        if (this.trainingController.isTraining()) {\n            this.trainingController.pause();\n        } else {\n            this.trainingController.start();\n        }\n    }\n\n    handleStepBtn() {\n        this.trainingController.step();\n    }\n\n    handleResetBtn() {\n        this.trainingController.reset();\n    }\n\n    handleBatch(imageCount) {\n        this.$imageCountValue.text(imageCount);\n    }\n\n    handleAccuracy(accuracy) {\n        this.$accuracyValue.attr('data-ranking', accuracy > 50 ? accuracy > 85 ? 'good' : 'mediocre' : 'bad');\n        this.$accuracyValue.text(`${Math.round(accuracy)}%`);\n    }\n\n    handleTrainingStart() {\n        this.$startPauseBtn.text('Pause');\n        this.$element.addClass('running');\n        this.nnComponent.disableDrawing();\n    }\n\n    handleTrainingPause() {\n        this.$startPauseBtn.text('Start');\n        this.$element.removeClass('running');\n        this.nnComponent.enableDrawing();\n    }\n\n    handleTrainingComplete() {\n        this.disableTrainingButtons();\n    }\n\n    handleTrainingReset() {\n        this.enableTrainingButtons();\n    }\n}\n","import EventEmitter from 'events';\nimport NeuralNetwork from './NeuralNetwork';\nimport TrainingViz from \"./training-viz\";\nimport { MnistData } from './MnistData';\n\n/**\n * A class to make a Neural Numbers component trainable.\n */\nexport default class TrainingController {\n  /**\n   * Constructor\n   *\n   * @param {NeuralNumbersComponent} nnComponent\n   *  A Neural Numbers component.\n   */\n  constructor(nnComponent, props) {\n    this.events = new EventEmitter();\n    this.nnComponent = nnComponent;\n\n    this.props = Object.assign({}, {\n      maxTrainingImages: 60000,\n      trainingImagePath: undefined,\n      trainingLabelPath: undefined,\n    }, props);\n\n    this.nn = new NeuralNetwork({\n      trainingCallback: this.handleTraining.bind(this),\n      batchCallback: this.handleBatch.bind(this),\n      modelUpdateAsyncCallback: this.handleModelUpdate.bind(this),\n    });\n    this.data = new MnistData(\n      this.props.trainingImagePath,\n      this.props.trainingLabelPath,\n    );\n    this.trainingViz = new TrainingViz(this);\n  }\n\n  /**\n   * Initialize the controller.\n   *\n   * Call this method before using the controller.\n   * @returns {Promise<void>}\n   */\n  async init() {\n    await this.data.load();\n    this.rebuildNetwork();\n  }\n\n  /**\n   * Resets the network to its untrained state.\n   * @protected\n   */\n  rebuildNetwork() {\n    this.nn.init();\n    this.nnComponent.setModel(this.nn.model);\n    this.handleModelUpdate(this.nn.model);\n    /**\n     * Emitted when the network is reset.\n     *\n     * @event TrainingController.events#reset\n     */\n    this.events.emit('reset');\n  }\n\n  /**\n   * Connects the Neural Numbers component to its original fully trained model.\n   */\n  useDefaultModel() {\n    this.nnComponent.setModel();\n    this.handleModelUpdate(this.nn.model);\n  }\n\n  /**\n   * Connects the Neural Numbers component to a new trainable model.\n   */\n  useTrainableModel() {\n    this.rebuildNetwork();\n  }\n\n  /**\n   * Returns whether the network is currently training.\n   * @returns {boolean}\n   */\n  isTraining() {\n    return this.nn.isTraining();\n  }\n\n  /**\n   * Starts training the network.\n   *\n   * @returns {Promise<void>}\n   * @fires TrainingController.events#start\n   * @fires TrainingController.events#batch\n   * @fires TrainingController.events#accuracy\n   */\n  async start() {\n    if (this.nn.trainedimages >= this.props.maxTrainingImages) {\n      return;\n    }\n    /**\n     * Emitted when training starts.\n     *\n     * @event TrainingController.events#start\n     */\n    this.events.emit('start');\n    await this.nn.train(this.data);\n  }\n\n  /**\n   * Pauses training the network.\n   *\n   * @fires TrainingController.events#pause\n   */\n  pause() {\n    this.nn.pauseTrainingNow();\n    /**\n     * Emitted when training pauses.\n     *\n     * @event TrainingController.events#pause\n     */\n    this.events.emit('pause');\n  }\n\n  /**\n   * Trains the network for a single step.\n   *\n   * @returns {Promise<void>}\n   * @fires TrainingController.events#batch\n   * @fires TrainingController.events#accuracy\n   */\n  async step() {\n    if (this.nn.trainedimages >= this.props.maxTrainingImages) {\n      return;\n    }\n    await this.nn.trainSingleStep(this.data);\n  }\n\n  /**\n   * Resets the network to its untrained state.\n   *\n   * @returns {Promise<void>}\n   */\n  async reset() {\n    await this.nn.pauseTraining();\n    this.rebuildNetwork();\n  }\n\n  /**\n   * Handles a batch of training images.\n   * @private\n   * @type {number}\n   * @param {number} imageCount\n   *  The number of images in the batch.\n   */\n  handleBatch(imageCount) {\n    /**\n     * Emitted when a batch of training images is processed.\n     *\n     * @event TrainingController.events#batch\n     * @type {number}\n     * @property {number} imageCount\n     *  The number of images in the batch.\n     */\n    this.events.emit('batch', imageCount);\n    if (imageCount >= this.props.maxTrainingImages) {\n      /**\n       * Emitted when training is complete.\n       *\n       * @event TrainingController.events#training-complete\n       */\n      this.events.emit('training-complete');\n      this.pause();\n    }\n  }\n\n  /**\n   * Handles a training step.\n   * @private\n   * @param trainXs\n   * @param trainYs\n   * @returns {Promise<void>}\n   */\n  async handleTraining(trainXs, trainYs) {\n    await this.trainingViz.setCurrentTraining(trainXs, trainYs);\n  }\n\n  /**\n   * Handles a model update.\n   * @private\n   * @param model\n   * @returns {Promise<void>}\n   */\n  async handleModelUpdate(model) {\n    const accuracy = await this.trainingViz.estimateAccuracy(model, 1000);\n    /**\n     * Emitted when the accuracy of the model is estimated.\n     *\n     * @event TrainingController.events#accuracy\n     * @type {number}\n     * @property {number} accuracy\n     *  The estimated accuracy of the model.\n     */\n    this.events.emit('accuracy', accuracy);\n  }\n}\n","export default class TrainingViz {\n    constructor(trainingController) {\n        this.trainingController = trainingController;\n        this.nnComponent = trainingController.nnComponent;\n        this.drawCanvas = this.nnComponent.$drawCanvas[0];\n        this.drawCanvasCtx = this.drawCanvas.getContext('2d', { willReadFrequently: true });\n\n        this.trainDigitBuffer = document.createElement('canvas');\n        this.trainDigitBuffer.height = 28;\n        this.trainDigitBuffer.width = 28;\n    }\n\n    async init() {\n\n    }\n\n    async setCurrentTraining(trainXs, trainYs) {\n        const trainX1 = trainXs.slice([0, 0, 0, 0], [1, 28, 28, 1]); // only the first\n        const imageTensor = trainX1.reshape([28, 28, 1]); // first as image\n        await tf.browser.toPixels(imageTensor, this.trainDigitBuffer);\n        this.trainDigitBuffer.active = true;\n        this.currentDigit = imageTensor.dataSync();\n        this.computeActivations(trainX1);\n        const trainY1 = trainYs.slice([0, 0], [1, 10]); // only the first\n        [this.currentTarget] = trainY1.argMax([-1]).dataSync();\n        this.renderNetwork();\n        this.renderActivations();\n        // clean up\n        trainX1.dispose();\n        trainY1.dispose();\n        imageTensor.dispose();\n    }\n\n    computeActivations(input) {\n        const { nn } = this.trainingController;\n        if (nn.modelid === 'dense') {\n            const A1 = nn.model.layers[0].apply(input);\n            const A2 = nn.model.layers[1].apply(A1);\n            const A3 = nn.model.layers[2].apply(A2);\n            this.intermediateActivations = A2.dataSync().map(x => Math.abs(x) / 2);\n            this.currentProbabilities = A3.dataSync();\n            [this.currentTarget] = A3.argMax([-1]).dataSync();\n            A1.dispose();\n            A2.dispose();\n            A3.dispose();\n        } else {\n            const prediction = nn.model.predict(input);\n            this.currentProbabilities = prediction.dataSync();\n            [this.currentTarget] = prediction.argMax([-1]).dataSync();\n            prediction.dispose();\n        }\n    }\n\n    renderNetwork() {\n\n    }\n\n    clearActivations() {\n        this.drawCanvasCtx.clearRect(0, 0, this.drawCanvas.width, this.drawCanvas.height);\n    }\n\n    renderActivations() {\n        this.clearActivations();\n\n        if (this.trainDigitBuffer.active) {\n            const destOrigin = this.drawCanvas.width * 0.125;\n            const destSize = this.drawCanvas.width * 0.75;\n            // this.drawCanvasCtx.imageSmoothingEnabled = false; // no antialiasing\n            this.drawCanvasCtx.drawImage(this.trainDigitBuffer, 0, 0, 28, 28, destOrigin, destOrigin, destSize, destSize);\n            this.nnComponent.hidePlaceholder();\n            this.nnComponent.setClearTimeout();\n            this.nnComponent.setClearOnInput();\n        }\n\n        this.nnComponent.getBarChart().update(this.currentProbabilities, this.currentTarget);\n    }\n\n    async estimateAccuracy(model, testDataSize = 1000) {\n        const { data }  = this.trainingController;\n        const accuracy = tf.tidy(() => {\n            const d = data.nextTestBatch(testDataSize);\n            const testXs = d.xs.reshape([testDataSize, 28, 28, 1]);\n            const testYs = d.labels;\n            return model.evaluate(testXs, testYs)[1].dataSync();\n        });\n\n        if (testDataSize < 1000 && accuracy > 0.9) {\n            // compute more exact accuracy if it is close to 100%\n            return await this.estimateAccuracy(model, 1000);\n        }\n\n        return (accuracy < 0.9) ?\n            Math.round(accuracy * 100) :\n            Math.round(accuracy * 1000) / 10;\n    }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n"]}