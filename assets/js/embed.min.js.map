{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/BarChart.js","js/Paint.js","js/main-embed.js","js/neural-numbers-component.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","BarChart","el","_classCallCheck","this","cleanup","bars","cbarcontainer","document","createElement","className","classList","add","cbartext","innerHTML","concat","appendChild","firstChild","removeChild","probabilities","highlighted","arguments","undefined","dataset","probability","style","toggle","_BarChart","SCALE_FACTOR","LINEWIDTH","Paint","model","outputThreshold","nwvis","clearTimeoutTime","drawingChanged","barchart","drawingActive","clearOnInput","pos","x","y","createUI","empty","isdown","pointerId","_this","eventname","eventfunctions","pointerdown","clear","removeClearTimeout","setPosition","pointermove","draw","pointerup","setClearTimeout","pointerleave","pointercancel","drawcanvas","addEventListener","passive","removeEventListener","_this2","querySelector","normalizecanvas","outputbars","outputdigit","inputbox","addEventListeners","width","height","updateDimensions","Math","floor","clientWidth","window","onresize","drawcontext","getContext","willReadFrequently","normalizecontext","rect","getBoundingClientRect","clientX","left","clientY","top","clearTimeout","_this3","setTimeout","ox","oy","nx","ny","abs","remove","beginPath","lineWidth","lineCap","strokeStyle","moveTo","lineTo","stroke","fillStyle","fillRect","normalize","predict","SKIPFACTOR","boxsize","centerx","centery","bottom","right","data","getImageData","totalweight","min","max","drawImage","_tf$tidy2","predicted","_this4","_slicedToArray","tf","tidy","imageTensor","browser","fromPixels","toFloat","mul","scalar","clipByValue","reshape","show","filter","d","k","result","dataSync","argMax","update","parentElement","removeEventListeners","_neuralNumbersComponent","props","container","element","urlSearchParams","URLSearchParams","location","search","modelName","get","test","modelPath","safeInputPlaceholder","showBars","showNormalizer","showOutput","$","addClass","appendTo","includes","init","text","_Paint","models","_callee2","path","regeneratorRuntime","wrap","_context2","prev","next","loadLayersModel","sent","abrupt","stop","NeuralNumbersComponent","$element","defaultModel","paint","_this$props","inputPlaceholder","verticalBars","toggleClass","$inputStage","$drawCanvas","placeholderText","html","append","$normalizeStage","$normalizeCanvas","$probabilityStage","$bars","$outputStage","$output","loadModel","PAINT_CLEAR_TIMEOUT","swapModel","disableDrawing","enableDrawing","setClearOnInput"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,gB,4OCAqBK,E,WACnB,SAAAA,EAAYC,I,4FAAIC,CAAAC,KAAAH,GACdG,KAAKF,GAAKA,EAEVE,KAAKC,UAELD,KAAKE,KAAO,GACZ,IAAK,IAAInB,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC9B,IAAMoB,EAAgBC,SAASC,cAAc,OAC7CF,EAAcG,UAAY,eAC1BN,KAAKE,KAAKnB,GAAKqB,SAASC,cAAc,OACtCL,KAAKE,KAAKnB,GAAGwB,UAAUC,IAAI,OAC3B,IAAMC,EAAWL,SAASC,cAAc,OACxCI,EAASH,UAAY,SACrBG,EAASC,UAAT,GAAAC,OAAwB5B,GACxBoB,EAAcS,YAAYZ,KAAKE,KAAKnB,IACpCoB,EAAcS,YAAYH,GAC1BT,KAAKF,GAAGc,YAAYT,I,yDAKtB,KAAOH,KAAKF,GAAGe,YACbb,KAAKF,GAAGgB,YAAYd,KAAKF,GAAGe,c,6BAIzBE,E,GACL,IADsC,IAAlBC,EAAkB,EAAAC,UAAAvB,aAAAwB,I,KAAH,EAC1BnC,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAC3BiB,KAAKE,KAAKnB,GAAGoC,QAAQC,YAAcL,EAAchC,GACjDiB,KAAKE,KAAKnB,GAAGsC,MAAb,kBAAAV,OAAuCI,EAAchC,IACrDiB,KAAKE,KAAKnB,GAAGwB,UAAUe,OAAO,cAAevC,IAAMiC,Q,mJC7BzD,I,EAAAO,G,EAAArC,EAAA,mB,woCAEA,IAAIsC,EAAe,EACfC,EAAY,EAAID,EAECE,E,WACnB,SAAAA,EAAY5B,EAAI6B,EAAOC,GAAwD,IAAvCC,EAAuC,EAAAZ,UAAAvB,aAAAwB,IAAAD,UAAA,IAAAA,UAAA,GAAxBa,EAAwB,EAAAb,UAAAvB,aAAAwB,IAAAD,UAAA,GAAAA,UAAA,GAAL,K,4FAAKlB,CAAAC,KAAA0B,GAC7E1B,KAAK8B,iBAAmBA,EACxB9B,KAAK+B,gBAAiB,EACtB/B,KAAK2B,MAAQA,EACb3B,KAAK6B,MAAQA,EACb7B,KAAKgC,SAAW,KAChBhC,KAAKiC,eAAgB,EACrBjC,KAAKkC,cAAe,EAEpBlC,KAAK4B,gBAAkBA,EAGvB5B,KAAKmC,IAAM,CACTC,EAAG,EACHC,EAAG,GAGLrC,KAAKsC,SAASxC,GACdE,KAAKuC,OAAQ,EACbvC,KAAKwC,QAAS,EACdxC,KAAKyC,WAAa,E,mEAGA,IAAAC,EAAA1C,KAsClB,IAAK,IAAM2C,KArCX3C,KAAK4C,eAAiB,CACpBC,YAAc,SAAClE,IACR+D,EAAKF,QAAUE,EAAKT,gBACnBS,EAAKR,cACPQ,EAAKI,QAEPJ,EAAKK,qBACLL,EAAKM,YAAYrE,GACjB+D,EAAKF,QAAS,EACdE,EAAKD,UAAY9D,EAAE8D,YAGvBQ,YAAc,SAACtE,GACT+D,EAAKF,QAAUE,EAAKT,eAAkBS,EAAKD,YAAc9D,EAAE8D,WAC7DC,EAAKQ,KAAKvE,IAGdwE,UAAY,SAACxE,GACP+D,EAAKT,eAAkBS,EAAKD,YAAc9D,EAAE8D,YAC9CC,EAAKU,kBACLV,EAAKF,QAAS,IAGlBa,aAAe,SAAC1E,GACV+D,EAAKT,eAAkBS,EAAKD,YAAc9D,EAAE8D,YAC9CC,EAAKU,kBACLV,EAAKF,QAAS,IAGlBc,cAAgB,SAAC3E,GACX+D,EAAKT,eAAkBS,EAAKD,YAAc9D,EAAE8D,YAC9CC,EAAKU,kBACLV,EAAKF,QAAS,KAKIxC,KAAK4C,eAC3B5C,KAAKuD,WAAWC,iBAAiBb,EAAW3C,KAAK4C,eAAeD,GAAY,CAC1Ec,SAAS,M,6CAMb,IAAK,IAAMd,KAAa3C,KAAK4C,eAC3B5C,KAAKuD,WAAWG,oBAAoBf,EAAW3C,KAAK4C,eAAeD,M,+BAI9D7C,GAAI,IAAA6D,EAAA3D,KACXA,KAAKuD,WAAazD,EAAG8D,cAAc,eACnC5D,KAAK6D,gBAAkB/D,EAAG8D,cAAc,qBAAuBxD,SAASC,cAAc,UACtFL,KAAK8D,WAAahE,EAAG8D,cAAc,SACnC5D,KAAK+D,YAAcjE,EAAG8D,cAAc,UACpC5D,KAAKgE,SAAWlE,EAAG8D,cAAc,cAEjC5D,KAAKiE,oBAPM,IASHJ,EAAgC7D,KAAhC6D,gBAAiBN,EAAevD,KAAfuD,WAEzBM,EAAgBK,MAAQ,GACxBL,EAAgBM,OAAS,GAEA,SAAnBC,IACJ5C,EAAe6C,KAAKC,MAAMX,EAAKJ,WAAWgB,YAAc,IAAM,EAC9D9C,EAAY,EAAID,EAChB+B,EAAWW,MAAQP,EAAKJ,WAAWgB,YACnChB,EAAWY,OAASR,EAAKJ,WAAWgB,YAEtCH,IACAI,OAAOC,SAAW,WAChBL,KAGFpE,KAAK0E,YAAc1E,KAAKuD,WAAWoB,WAAW,KAAM,CAAEC,oBAAoB,IAC1E5E,KAAK6E,iBAAmB7E,KAAK6D,gBAAgBc,WAAW,KAAM,CAAEC,oBAAoB,IAsBhF5E,KAAK8D,aACP9D,KAAKgC,SAAW,IAAIT,EAAA,QAASvB,KAAK8D,aAGpC9D,KAAK8C,U,kCAIKnE,GACV,IAAMmG,EAAO9E,KAAKuD,WAAWwB,wBAG7B,OAFA/E,KAAKmC,IAAIC,EAAKzD,EAAEqG,QAAUF,EAAKG,KAC/BjF,KAAKmC,IAAIE,EAAK1D,EAAEuG,QAAUJ,EAAKK,KACxB,I,2CAOP,OAHInF,KAAKoF,cACPA,aAAapF,KAAKoF,eAEb,I,wCAGS,IAAAC,EAAArF,KAMhB,OALAA,KAAK+C,qBAEL/C,KAAKoF,aAAeE,WAAW,WAC7BD,EAAKvC,SACoB,IAAxB9C,KAAK8B,mBACD,I,wCAIP9B,KAAKkC,cAAe,I,2BAGjBvD,GACHqB,KAAK+C,qBACL,IAAMwC,EAAKvF,KAAKmC,IAAIC,EACdoD,EAAKxF,KAAKmC,IAAIE,EACpBrC,KAAKgD,YAAYrE,GACjB,IAAM8G,EAAKzF,KAAKmC,IAAIC,EACdsD,EAAK1F,KAAKmC,IAAIE,EACpB,GAAIgC,KAAKsB,IAAIF,EAAKF,GAAMlB,KAAKsB,IAAID,EAAKF,GAAM,EAG1C,OAFAxF,KAAKmC,IAAIC,EAAImD,OACbvF,KAAKmC,IAAIE,EAAImD,GAGfxF,KAAKgE,SAASzD,UAAUqF,OAAO,cAC/B5F,KAAKuC,OAAQ,EACbvC,KAAK0E,YAAYmB,YACjB7F,KAAK0E,YAAYoB,UAAYrE,EAC7BzB,KAAK0E,YAAYqB,QAAU,QAC3B/F,KAAK0E,YAAYsB,YAAc,QAE/BhG,KAAK0E,YAAYuB,OAAOV,EAAIC,GAC5BxF,KAAKgD,YAAYrE,GACjBqB,KAAK0E,YAAYwB,OAAOT,EAAIC,GAE5B1F,KAAK0E,YAAYyB,SAEjBnG,KAAK6E,iBAAiBuB,UAAY,QAClCpG,KAAK6E,iBAAiBwB,SAAS,EAAG,EAAGrG,KAAK6D,gBAAgBK,MAAOlE,KAAK6D,gBAAgBM,QAEtFnE,KAAK+B,gBAAiB,EACtB/B,KAAKsG,UAAU7E,GACfzB,KAAKuG,Y,gCAKGC,GAYR,IAXA,IA6BQC,EA7BJC,EAAU,EACVC,EAAU,EACVxB,EAAM,IACNyB,GAAU,IACV3B,EAAO,IACP4B,GAAS,IAILC,EAHQ9G,KAAK0E,YAAYqC,aAC/B,EAAG,EAAG/G,KAAKuD,WAAWW,MAAOlE,KAAKuD,WAAWY,QAEvC2C,KACJE,EAAc,EACTjI,EAAI,EAAGA,EAAI+H,EAAKpH,OAAQX,GAAK,EAAIyH,EAAY,CACpD,IAAMpE,EAAKrD,EAAI,EAAKiB,KAAKuD,WAAWW,MAC9B7B,EAAMtD,EAAI,EAAMiB,KAAKuD,WAAWW,MAAU,EAChD8C,GAAeF,EAAK/H,GACpB2H,GAAYI,EAAK/H,GAAMqD,EACvBuE,GAAYG,EAAK/H,GAAMsD,EAET,EAAVyE,EAAK/H,KACPoG,EAAMd,KAAK4C,IAAI9B,EAAK9C,GACpBuE,EAASvC,KAAK6C,IAAIN,EAAQvE,GAC1B4C,EAAOZ,KAAK4C,IAAIhC,EAAM7C,GACtByE,EAAQxC,KAAK6C,IAAIL,EAAOzE,IA8B5B,OA3BkB,EAAd4E,GACFN,GAAWM,EACXL,GAAWK,EAELP,EAAUpC,KAAK6C,IAAIL,EAAQ5B,EAAM2B,EAASzB,GAWhDnF,KAAK6E,iBAAiBsC,UACpBnH,KAAKuD,WACL0B,EAAME,EACNsB,EAASA,EACT,GAAM,GAAKA,GAAYxB,EAAOyB,GAC9B,GAAM,GAAKD,GAAYtB,EAAMwB,GAC7B,GAAI,KAGN3G,KAAK6E,iBAAiBwB,SAAS,EAAG,EAAGrG,KAAK6D,gBAAgBK,MAAOlE,KAAK6D,gBAAgBM,SAGjF,I,gCAGC,IACuDiD,EACtDrG,EAAesG,EAFhBC,EAAAtH,KAgCR,OA/BIA,KAAK2B,OAAS3B,KAAK6D,iBAAmB7D,KAAK+B,iBACtChB,GADsDqG,EAAAG,EAC1BC,GAAGC,KAAK,WACzC,IAAMC,EAAcF,GAAGG,QACpBC,WAAWN,EAAKzD,gBAAiB,GACjCgE,UACAC,IAAIN,GAAGO,OAAO,EAAI,MAClBC,YAAY,EAAG,GACfC,QAAQ,CAAC,EAAG,GAAI,GAAI,IACnBX,EAAKzF,OACPyF,EAAKzF,MAAMqG,KAAKR,EACdJ,EAAKzC,iBAAiBkC,aACpB,EAAG,EACHO,EAAKzD,gBAAgBK,MAAOoD,EAAKzD,gBAAgBM,QACjD2C,KAAKqB,OAAO,SAACC,EAAGC,GAAJ,OAAWA,EAAI,GAAM,KAEvC,IAAMC,EAAShB,EAAK3F,MAAM4E,QAAQmB,GAClC,MAAO,CACLY,EAAOC,WACPD,EAAOE,OAAO,EAAE,IAAID,cAlBqC,IAAA,GACvClB,EADuCD,EAAA,GAsBzDpH,KAAKgC,UACPhC,KAAKgC,SAASyG,OAAO1H,EAAesG,GAGlCrH,KAAK+D,cACP/D,KAAK+D,YAAYrD,WAAcV,KAAKuC,OAASxB,EAAcsG,GAAarH,KAAK4B,gBAAmByF,EAAY,IAC5GrH,KAAK+D,YAAY2E,cAAcnI,UAAUe,OAAO,SAAUP,EAAcsG,GAAarH,KAAK4B,oBAGvF,I,gCAGCD,GACR3B,KAAK2B,MAAQA,EACb3B,KAAKuG,Y,8BAILvG,KAAKkC,cAAe,EACpBlC,KAAK0E,YAAY2B,SAAS,EAAG,EAAGrG,KAAKuD,WAAWW,MAAOlE,KAAKuD,WAAWY,QACvEnE,KAAKuC,OAAQ,EACbvC,KAAKsG,UAAU,KACftG,KAAKuG,UACLvG,KAAKgE,SAASzD,UAAUC,IAAI,gB,gCAI5BR,KAAK8C,QACL9C,KAAK2I,uBAKD3I,KAAKgC,UACPhC,KAAKgC,SAAS/B,Y,uCAKhBD,KAAKiC,eAAgB,EACrBjC,KAAKwC,QAAS,I,sCAIdxC,KAAKiC,eAAgB,O,kGCnUzB,I,EAAA2G,G,EAAA1J,EAAA,gC,2BAuBA,IAMQ2J,EA3BgBC,EAAWD,EAC3BE,EAoBFC,EAAkB,IAAIC,gBAAgBzE,OAAO0E,SAASC,QAEtDC,EAAYJ,EAAgBK,IAAI,UAAY,WAEjB,sBACJC,KAAKF,IAC1BP,EAAQ,CACZU,UAAS,iBAAA5I,OAAmByI,EAAnB,SACTI,qBAAsBR,EAAgBK,IAAI,sBAAwB,GAClEI,SAA+C,SAArCT,EAAgBK,IAAI,eAA2B,EACzDK,eAA2D,SAA3CV,EAAgBK,IAAI,qBAAiC,EACrEM,WAAmD,UAAvCX,EAAgBK,IAAI,eAChChI,MAAO2H,EAAgBK,IAAI,UAAY,WAjCnBP,EAoCP,OApCkBD,EAoCVA,EAnCjBE,EAAUa,EAAE,eACfC,SAAS,sCACTC,SAAShB,GAGRD,EAAMxH,OADK,CAAC,UAAW,MAAO,YACR0I,SAASlB,EAAMxH,QACvC0H,EAAQc,SAAR,4BAAAlJ,OAA6CkI,EAAMxH,QAGnC,IAAIuH,EAAA,QAAuBG,EAASF,GAC5CmB,QAIVJ,EAAE,eACCC,SAAS,CAAC,QAAS,gBACnBI,KAqBe,sBApBfH,SAoBO,S,oICtCZ,I,EAAAI,G,EAAAhL,EAAA,a,2fAEA,IAAMiL,EAAS,G,gDAEf,SAAAC,EAAyBC,GAAzB,OAAAC,mBAAAC,KAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,IACML,GAAUA,KAAQF,EADxB,CAAAK,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAE,KAAA,EAEyBlD,GAAGmD,gBAAgBN,GAF5C,KAAA,EAEIF,EAAOE,GAFXG,EAAAI,KAAA,KAAA,EAAA,OAAAJ,EAAAK,OAAA,SAISV,EAAOE,IAJhB,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAM,SAAAV,O,0BAOqBW,E,WACnB,SAAAA,EAAYhC,EAASF,I,4FAAO9I,CAAAC,KAAA+K,GAC1B/K,KAAKgL,SAAWpB,EAAEb,GAClB/I,KAAK6I,MAAQA,EACb7I,KAAKiL,aAAe,KACpBjL,KAAK2B,MAAQ,KACb3B,KAAKkL,MAAQ,KALa,IAAAC,EActBnL,KAAK6I,MANPuC,EARwBD,EAQxBC,iBACA5B,EATwB2B,EASxB3B,qBACAC,EAVwB0B,EAUxB1B,SACAC,EAXwByB,EAWxBzB,eACAC,EAZwBwB,EAYxBxB,WACA0B,EAbwBF,EAaxBE,aAGFrL,KAAKgL,SAASnB,SAAS,4BACvB7J,KAAKgL,SAASM,YAAY,YAAa7B,GACvCzJ,KAAKgL,SAASM,YAAY,kBAAmB5B,GAC7C1J,KAAKgL,SAASM,YAAY,cAAe3B,GAEzC3J,KAAKuL,YAAc3B,EAAE,SAClBC,SAAS,CAAC,QAAS,cAAe,QAAS,QAC3CC,SAAS9J,KAAKgL,UAEjBhL,KAAKwL,YAAc5B,EAAE,YAClBC,SAAS,CAAC,aAAc,iBACxBC,SACCF,EAAE,SACCC,SAAS,wBACTC,SAAS9J,KAAKuL,cAGrB,IAAME,EAAkB7B,EAAE,UACtBwB,EACFK,EAAgBC,KAAKN,GACZ5B,GACTiC,EAAgBxB,KAAKT,GAEvBI,EAAE,SACGC,SAAS,qBACT8B,OAAOF,GACP3B,SAAS9J,KAAKuL,aAEnBvL,KAAK4L,gBAAkBhC,EAAE,SACtBC,SAAS,CAAC,QAAS,oBACnBC,SAAS9J,KAAKgL,UAEjBhL,KAAK6L,iBAAmBjC,EAAE,YACvBC,SAAS,mBACTC,SAASF,EAAE,SACTC,SAAS,4BACTC,SAAS9J,KAAK4L,kBAEnB5L,KAAK8L,kBAAoBlC,EAAE,SACxBC,SAAS,CAAC,QAAS,eACnBC,SAAS9J,KAAKgL,UAEjBhL,KAAK+L,MAAQnC,EAAE,SACZC,SAAS,QACTyB,YAAY,gBAAiBD,IAAgB,GAC7CvB,SAAS9J,KAAK8L,mBAEjB9L,KAAKgM,aAAepC,EAAE,SACnBC,SAAS,CAAC,QAAS,iBACnBC,SAAS9J,KAAKgL,UAEjBhL,KAAKiM,QAAUrC,EAAE,SACdC,SAAS,CAAC,SAAU,UACpBC,SAASF,EAAE,SACTC,SAAS,kBACTC,SAAS9J,KAAKgM,e,mLAIXzC,EAAcvJ,KAAK6I,MAAnBU,U,oDACkB2C,CAAU3C,G,OAApCvJ,KAAKiL,a,OACLjL,KAAK2B,MAAQ3B,KAAKiL,aAElBjL,KAAKkL,MAAQ,IAAIhB,EAAA,QACflK,KAAKgL,SAAS,GACdhL,KAAK2B,MACL,IACA,EACAoJ,EAAuBoB,qB,6HAGJ,IAAdxK,EAAc,EAAAV,UAAAvB,aAAAwB,I,IAAN,KACD,OAAVS,IACFA,EAAQ3B,KAAKiL,cAEfjL,KAAK2B,MAAQA,EACb3B,KAAKkL,MAAMkB,UAAUzK,K,oCAIrB,OAAO3B,KAAKkL,MAAMlJ,W,uCAIlBhC,KAAKkL,MAAMmB,mB,sCAIXrM,KAAKkL,MAAMoB,kB,wCAIXtM,KAAKkL,MAAM9H,oB,wCAIXpD,KAAKkL,MAAMqB,uB,8CAIQJ,oBAAsB","file":"embed.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export default class BarChart {\n  constructor(el) {\n    this.el = el;\n    // cleanup potentially previously existing bars\n    this.cleanup();\n\n    this.bars = [];\n    for (let i = 0; i < 10; i += 1) {\n      const cbarcontainer = document.createElement('div');\n      cbarcontainer.className = 'barcontainer';\n      this.bars[i] = document.createElement('div');\n      this.bars[i].classList.add('bar');\n      const cbartext = document.createElement('div');\n      cbartext.className = 'bartxt';\n      cbartext.innerHTML = `${i}`;\n      cbarcontainer.appendChild(this.bars[i]);\n      cbarcontainer.appendChild(cbartext);\n      this.el.appendChild(cbarcontainer);\n    }\n  }\n\n  cleanup() {\n    while (this.el.firstChild) {\n      this.el.removeChild(this.el.firstChild);\n    }\n  }\n\n  update(probabilities, highlighted = -1) {\n    for (let i = 0; i < 10; i += 1) {\n      this.bars[i].dataset.probability = probabilities[i];\n      this.bars[i].style = `--probability: ${probabilities[i]}`;\n      this.bars[i].classList.toggle('highlighted', i === highlighted);\n    }\n  }\n}\n","/* globals tf */\n/* eslint-disable no-bitwise */\nimport BarChart from './BarChart.js';\n\nlet SCALE_FACTOR = 9;\nlet LINEWIDTH = 2 * SCALE_FACTOR;\n\nexport default class Paint {\n  constructor(el, model, outputThreshold, nwvis = false, clearTimeoutTime = 2.2) {\n    this.clearTimeoutTime = clearTimeoutTime;\n    this.drawingChanged = true;\n    this.model = model;\n    this.nwvis = nwvis;\n    this.barchart = null;\n    this.drawingActive = true;\n    this.clearOnInput = false;\n\n    this.outputThreshold = outputThreshold;\n\n    // last known position\n    this.pos = {\n      x: 0,\n      y: 0,\n    };\n\n    this.createUI(el);\n    this.empty = true;\n    this.isdown = false;\n    this.pointerId = -1;\n  }\n\n  addEventListeners() {\n    this.eventfunctions = {\n      pointerdown: ((e) => {\n        if (!this.isdown && this.drawingActive) {\n          if (this.clearOnInput) {\n            this.clear();\n          }\n          this.removeClearTimeout();\n          this.setPosition(e);\n          this.isdown = true;\n          this.pointerId = e.pointerId;\n        }\n      }),\n      pointermove: ((e) => {\n        if (this.isdown && this.drawingActive && (this.pointerId === e.pointerId)) {\n          this.draw(e);\n        }\n      }),\n      pointerup: ((e) => {\n        if (this.drawingActive && (this.pointerId === e.pointerId)) {\n          this.setClearTimeout();\n          this.isdown = false;\n        }\n      }),\n      pointerleave: ((e) => {\n        if (this.drawingActive && (this.pointerId === e.pointerId)) {\n          this.setClearTimeout();\n          this.isdown = false;\n        }\n      }),\n      pointercancel: ((e) => {\n        if (this.drawingActive && (this.pointerId === e.pointerId)) {\n          this.setClearTimeout();\n          this.isdown = false;\n        }\n      }),\n    };\n\n    for (const eventname in this.eventfunctions) {\n      this.drawcanvas.addEventListener(eventname, this.eventfunctions[eventname], {\n        passive: true,\n      });\n    }\n  }\n\n  removeEventListeners() {\n    for (const eventname in this.eventfunctions) {\n      this.drawcanvas.removeEventListener(eventname, this.eventfunctions[eventname]);\n    }\n  }\n\n  createUI(el) {\n    this.drawcanvas = el.querySelector('.drawcanvas');\n    this.normalizecanvas = el.querySelector('.normalizecanvas') || document.createElement('canvas');\n    this.outputbars = el.querySelector('.bars');\n    this.outputdigit = el.querySelector('.digit');\n    this.inputbox = el.querySelector('.input.box');\n\n    this.addEventListeners();\n\n    const { normalizecanvas, drawcanvas } = this;\n\n    normalizecanvas.width = 28;\n    normalizecanvas.height = 28;\n\n    const updateDimensions = () => {\n      SCALE_FACTOR = Math.floor(this.drawcanvas.clientWidth / 28) - 1;\n      LINEWIDTH = 2 * SCALE_FACTOR;\n      drawcanvas.width = this.drawcanvas.clientWidth;\n      drawcanvas.height = this.drawcanvas.clientWidth;\n    };\n    updateDimensions();\n    window.onresize = () => {\n      updateDimensions();\n    };\n\n    this.drawcontext = this.drawcanvas.getContext('2d', { willReadFrequently: true });\n    this.normalizecontext = this.normalizecanvas.getContext('2d', { willReadFrequently: true });\n    // const { drawcontext, normalizecontext } = this;\n    //  normalizecanvas.style.width = 28 * SCALE_FACTOR + 'px';\n    //  normalizecanvas.style.height = 28 * SCALE_FACTOR + 'px';\n    //  normalizecanvas.style.imageRendering = 'pixelated';\n    /*\n        const resetbutton = document.createElement(\"button\");\n        this.resetbutton = resetbutton;\n        this.resetbutton.style.visibility = 'hidden';\n\n        resetbutton.innerHTML = \"reset\";\n        resetbutton.addEventListener('click', () => {\n          this.drawcontext.fillRect(0, 0, this.drawcanvas.width, this.drawcanvas.height);\n          this.normalize(100);\n          this.predict();\n          this.resetbutton.style.visibility = 'hidden';\n        });\n\n        this.drawcanvas.parentNode.insertBefore(resetbutton, this.drawcanvas);\n        this.resetbutton.style.position = \"absolute\";\n        this.resetbutton.style.zIndex = 10;\n    */\n    if (this.outputbars) {\n      this.barchart = new BarChart(this.outputbars);\n    }\n\n    this.clear();\n  }\n\n\n  setPosition(e) {\n    const rect = this.drawcanvas.getBoundingClientRect();\n    this.pos.x = (e.clientX - rect.left);\n    this.pos.y = (e.clientY - rect.top);\n    return true;\n  }\n\n  removeClearTimeout() {\n    if (this.clearTimeout) {\n      clearTimeout(this.clearTimeout);\n    }\n    return true;\n  }\n\n  setClearTimeout() {\n    this.removeClearTimeout(); // remove previous clearTimeouts\n    // clean up everything after specified time\n    this.clearTimeout = setTimeout(() => {\n      this.clear();\n    }, this.clearTimeoutTime * 1000);\n    return true;\n  }\n\n  setClearOnInput() {\n    this.clearOnInput = true;\n  }\n\n  draw(e) {\n    this.removeClearTimeout();\n    const ox = this.pos.x;\n    const oy = this.pos.y;\n    this.setPosition(e);\n    const nx = this.pos.x;\n    const ny = this.pos.y;\n    if (Math.abs(nx - ox) + Math.abs(ny - oy) < 3) {\n      this.pos.x = ox;\n      this.pos.y = oy;\n      return;\n    }\n    this.inputbox.classList.remove('background');\n    this.empty = false;\n    this.drawcontext.beginPath(); // begin\n    this.drawcontext.lineWidth = LINEWIDTH;\n    this.drawcontext.lineCap = 'round';\n    this.drawcontext.strokeStyle = 'white';\n\n    this.drawcontext.moveTo(ox, oy); // from\n    this.setPosition(e);\n    this.drawcontext.lineTo(nx, ny); // to\n\n    this.drawcontext.stroke(); // draw it!\n\n    this.normalizecontext.fillStyle = 'black';\n    this.normalizecontext.fillRect(0, 0, this.normalizecanvas.width, this.normalizecanvas.height);\n\n    this.drawingChanged = true;\n    this.normalize(LINEWIDTH);\n    this.predict();\n    // this.resetbutton.style.visibility = 'visible';\n  }\n\n  // normalize image\n  normalize(SKIPFACTOR) {\n    let centerx = 0;\n    let centery = 0;\n    let top = 1000;\n    let bottom = -1000;\n    let left = 1000;\n    let right = -1000;\n    const imgData = this.drawcontext.getImageData(\n      0, 0, this.drawcanvas.width, this.drawcanvas.height\n    );\n    const { data } = imgData;\n    let totalweight = 0;\n    for (let i = 0; i < data.length; i += 4 * SKIPFACTOR) {\n      const x = (i / 4) % this.drawcanvas.width;\n      const y = ((i / 4) / (this.drawcanvas.width)) | 0;\n      totalweight += data[i];\n      centerx += (data[i]) * x;\n      centery += (data[i]) * y;\n\n      if (data[i] > 0) {\n        top = Math.min(top, y);\n        bottom = Math.max(bottom, y);\n        left = Math.min(left, x);\n        right = Math.max(right, x);\n      }\n    }\n    if (totalweight > 0) {\n      centerx /= totalweight;\n      centery /= totalweight;\n\n      const boxsize = Math.max(right - left, bottom - top);\n\n      // according to MNIST normalization:\n      /*\n      The original black and white (bilevel) images from NIST were size normalized\n      to fit in a 20x20 pixel box while preserving their aspect ratio. The\n      resulting images contain grey levels as a result of the anti-aliasing\n      technique used by the normalization algorithm. the images were centered\n      in a 28x28 image by computing the center of mass of the pixels, and\n      translating the image so as to position this point at the center of the 28x28 field.\n      */\n      this.normalizecontext.drawImage(\n        this.drawcanvas,\n        left, top,\n        boxsize, boxsize,\n        14 + (20 / boxsize) * (left - centerx),\n        14 + (20 / boxsize) * (top - centery),\n        20, 20\n      );\n    } else {\n      this.normalizecontext.fillRect(0, 0, this.normalizecanvas.width, this.normalizecanvas.height);\n    }\n\n    return true;\n  }\n\n  predict() {\n    if (this.model && this.normalizecanvas && this.drawingChanged) { // && newFrame rendered TODO?\n      const [probabilities, predicted] = tf.tidy(() => {\n        const imageTensor = tf.browser\n          .fromPixels(this.normalizecanvas, 1)\n          .toFloat()\n          .mul(tf.scalar(1 / 255))\n          .clipByValue(0, 1)\n          .reshape([1, 28, 28, 1]);\n        if (this.nwvis) {\n          this.nwvis.show(imageTensor,\n            this.normalizecontext.getImageData(\n              0, 0,\n              this.normalizecanvas.width, this.normalizecanvas.height\n            ).data.filter((d, k) => (k % 4 === 0)));\n        }\n        const result = this.model.predict(imageTensor);\n        return [\n          result.dataSync(),\n          result.argMax([-1]).dataSync(),\n        ];\n      });\n\n      if (this.barchart) {\n        this.barchart.update(probabilities, predicted);\n      }\n\n      if (this.outputdigit) {\n        this.outputdigit.innerHTML = (!this.empty && probabilities[predicted] > this.outputThreshold) ? predicted : '?';\n        this.outputdigit.parentElement.classList.toggle('solved', probabilities[predicted] > this.outputThreshold);\n      }\n    }\n    return true;\n  }\n\n  swapModel(model) {\n    this.model = model;\n    this.predict();\n  }\n\n  clear() {\n    this.clearOnInput = false;\n    this.drawcontext.fillRect(0, 0, this.drawcanvas.width, this.drawcanvas.height);\n    this.empty = true;\n    this.normalize(100);\n    this.predict();\n    this.inputbox.classList.add('background');\n  }\n\n  cleanup() {\n    this.clear();\n    this.removeEventListeners();\n\n    // this.predict();\n    // this.resetbutton.style.visibility = 'hidden';\n\n    if (this.barchart) {\n      this.barchart.cleanup();\n    }\n  }\n\n  disableDrawing() {\n    this.drawingActive = false;\n    this.isdown = false;\n  }\n\n  enableDrawing() {\n    this.drawingActive = true;\n  }\n}\n","import NeuralNumbersComponent from './neural-numbers-component';\n\nfunction buildComponent(container, props) {\n  const element = $('<div></div>')\n    .addClass('component neural-numbers-component')\n    .appendTo(container);\n\n  const styles = ['default', 'bad', 'mediocre'];\n  if (props.style && styles.includes(props.style)) {\n    element.addClass(`neural-numbers-component-${props.style}`);\n  }\n\n  const component = new NeuralNumbersComponent(element, props);\n  component.init();\n}\n\nfunction showError(container, error) {\n  $('<div></div>')\n    .addClass(['error', 'text-center'])\n    .text(error)\n    .appendTo(container);\n}\n\nconst urlSearchParams = new URLSearchParams(window.location.search);\n\nconst modelName = urlSearchParams.get('model') || 'my-model';\n\nconst modelNameValidationRegex = /^[0-9A-Za-z0\\-_.]+$/;\nif (modelNameValidationRegex.test(modelName)) {\n  const props = {\n    modelPath: `assets/models/${modelName}.json`,\n    safeInputPlaceholder: urlSearchParams.get('input-placeholder') || '',\n    showBars: urlSearchParams.get('show-bars') === 'true' || false,\n    showNormalizer: urlSearchParams.get('show-normalizer') === 'true' || false,\n    showOutput: urlSearchParams.get('show-output') !== 'false',\n    style: urlSearchParams.get('style') || 'default',\n  };\n\n  buildComponent('body', props);\n} else {\n  showError('body', 'Invalid model name');\n}\n","/* globals tf */\n\nimport Paint from './Paint';\n\nconst models = {};\n\nasync function loadModel(path) {\n  if (path && !(path in models)) {\n    models[path] = await tf.loadLayersModel(path);\n  }\n  return models[path];\n}\n\nexport default class NeuralNumbersComponent {\n  constructor(element, props) {\n    this.$element = $(element);\n    this.props = props;\n    this.defaultModel = null;\n    this.model = null;\n    this.paint = null;\n\n    const {\n      inputPlaceholder,\n      safeInputPlaceholder,\n      showBars,\n      showNormalizer,\n      showOutput,\n      verticalBars\n    } = this.props;\n\n    this.$element.addClass('neural-numbers-component');\n    this.$element.toggleClass('with-bars', showBars);\n    this.$element.toggleClass('with-normalizer', showNormalizer);\n    this.$element.toggleClass('with-output', showOutput);\n\n    this.$inputStage = $('<div>')\n      .addClass(['stage', 'stage-input', 'input', 'box'])\n      .appendTo(this.$element);\n\n    this.$drawCanvas = $('<canvas>')\n      .addClass(['drawcanvas', 'input-canvas'])\n      .appendTo(\n        $('<div>')\n          .addClass('input-canvas-wrapper')\n          .appendTo(this.$inputStage)\n      );\n\n    const placeholderText = $('<span>');\n    if (inputPlaceholder) {\n      placeholderText.html(inputPlaceholder);\n    } else if (safeInputPlaceholder) {\n      placeholderText.text(safeInputPlaceholder);\n    }\n    $('<div>')\n        .addClass('input-placeholder')\n        .append(placeholderText)\n        .appendTo(this.$inputStage);\n\n    this.$normalizeStage = $('<div>')\n      .addClass(['stage', 'stage-normalize'])\n      .appendTo(this.$element);\n\n    this.$normalizeCanvas = $('<canvas>')\n      .addClass('normalizecanvas')\n      .appendTo($('<div>')\n        .addClass('normalize-canvas-wrapper')\n        .appendTo(this.$normalizeStage));\n\n    this.$probabilityStage = $('<div>')\n      .addClass(['stage', 'stage-bars'])\n      .appendTo(this.$element);\n\n    this.$bars = $('<div>')\n      .addClass('bars')\n      .toggleClass('bars-vertical', verticalBars || false)\n      .appendTo(this.$probabilityStage);\n\n    this.$outputStage = $('<div>')\n      .addClass(['stage', 'stage-output'])\n      .appendTo(this.$element);\n\n    this.$output = $('<div>')\n      .addClass(['output', 'digit'])\n      .appendTo($('<div>')\n        .addClass('output-wrapper')\n        .appendTo(this.$outputStage));\n  }\n\n  async init() {\n    const { modelPath } = this.props;\n    this.defaultModel = await loadModel(modelPath);\n    this.model = this.defaultModel;\n\n    this.paint = new Paint(\n      this.$element[0],\n      this.model,\n      0.5,\n      false,\n      NeuralNumbersComponent.PAINT_CLEAR_TIMEOUT);\n  }\n\n  setModel(model = null) {\n    if (model === null) {\n      model = this.defaultModel;\n    }\n    this.model = model;\n    this.paint.swapModel(model);\n  }\n\n  getBarChart() {\n    return this.paint.barchart;\n  }\n\n  disableDrawing() {\n    this.paint.disableDrawing();\n  }\n\n  enableDrawing() {\n    this.paint.enableDrawing();\n  }\n\n  setClearTimeout() {\n    this.paint.setClearTimeout();\n  }\n\n  setClearOnInput() {\n    this.paint.setClearOnInput();\n  }\n}\n\nNeuralNumbersComponent.PAINT_CLEAR_TIMEOUT = 2.2;\n"]}